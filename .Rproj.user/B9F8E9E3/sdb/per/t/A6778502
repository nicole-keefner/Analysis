{
    "collab_server" : "",
    "contents" : "### Nicole Keefner\n### Master's Thesis\n\n\n\n## Use *** to search for errors in the code or areas that need more work\n\n\n\n## Set Working Directory\n\n\n\n## Load packages\nlibrary(tidyverse)\nlibrary(tidyr)\nlibrary(plyr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(reshape2)\n\n\n\n## Import coral dataset\n\n\n\n## Import sponge dataset\nsponge_raw <- read.csv(\"sponge.csv\", header = T)\n\n# Only select rows and columns for which there are values entered (sponge_raw has extraneous rows and columns)\nsponge_raw <- sponge_raw[1:575,1:65]\n\n# Sometimes site names were entered using different capitalization. \n# Correct these entry mistakes by making names consistent\nsummary(sponge_raw$Site)\nsponge_raw$Site <- revalue(sponge_raw$Site, c(\"Pelican\" = \"pelican\"))\n\n# Only retain the 8 main sites:\n# Pelican Ghut, Grand Ghut, Crab Cove, Muskmelon, Bigelow, White Bay, Monkey Point, and Guana Head\nsponge_raw$Site <- as.character(sponge_raw$Site)\nsponge_raw <- sponge_raw[sponge_raw$Site == \"muskN\" | sponge_raw$Site == \"pelican\" | sponge_raw$Site == \"crab\" | \n                           sponge_raw$Site == \"bigelow\" | sponge_raw$Site == \"monkey\" | sponge_raw$Site == \"iguana\" |\n                           sponge_raw$Site == \"white\" | sponge_raw$Site == \"grand\", ]\nsponge_raw$Site <- as.factor(sponge_raw$Site)\n\n# Some \"ghost\" factors are being retained for transect and observer\n# Remove these ghost factors\nsummary(sponge_raw)\nsponge_raw$Observer <- as.character(sponge_raw$Observer)\nsponge_raw <- sponge_raw[sponge_raw$Observer == \"E MacLean\" | sponge_raw$Observer == \"L Jarecki\", ]\nsponge_raw$Observer <- as.factor(sponge_raw$Observer)\n\nsponge_raw$Transect <- as.character(sponge_raw$Transect)\nsponge_raw <- sponge_raw[sponge_raw$Transect == \"1\" | sponge_raw$Transect == \"2\" | sponge_raw$Transect == \"3\" | \n                           sponge_raw$Transect == \"4\" | sponge_raw$Transect == \"T\", ]\nsponge_raw$Transect <- as.factor(sponge_raw$Transect)\n\n# Create new column called \"Site_Year\" that combines the year and site as ####_Sitename\nsponge_raw <- transform(sponge_raw, Site_Year = paste(sponge_raw$Year, sponge_raw$Site, sep=\"_\"))\n\n# Create new column in all datasets called Taxa, so if dataframes are combined, I know which dataset the information came from\nsponge_raw$Taxa <- \"Sponge\"\n\n# Put dataset into long form (i.e. so species codes are in a single column rather than having one column for each species code)\n# key = \"title of new column\", value = \"numbers being moved around because of the key\", \n# \":\" specifies which columns should be included in key\nsponge_raw_longform <- sponge_raw %>%\n  gather(key = \"Taxonomic_Group\", value = \"Count\", Agelas.clathrodes..Agelas.citrina.or.Clathria.faviformis:Black..spiny..purple.exudate.but.not.slimy)\n\n# Double-check\nsummary(sponge_raw_longform)\n\n# Taxonomic_Group is being read as a character, but it should be a factor\n# overwrite column so it is a factor\nsponge_raw_longform$Taxonomic_Group <- as.factor(sponge_raw_longform$Taxonomic_Group)\n\n# Can also make Year a factor instead of an integer\nsponge_raw_longform$Year <- as.factor(sponge_raw_longform$Year)\n\n# Summary Information\nstr(sponge_raw_longform)\nsummary(sponge_raw_longform)\nsummary(sponge_raw_longform$Site)\nsummary(sponge_raw_longform$Year)\n\n# Aggregate groups by the site, year, taxgroup then averages the counts for each of these\nsponge_averages <- aggregate(sponge_raw_longform$Count, \n                             by = list(sponge_raw_longform$Site, sponge_raw_longform$Year, sponge_raw_longform$Taxonomic_Group), \n                             FUN = mean)\n#***change column headers to match the data in them\n\n# Define new function to use in the aggregate function to calculate richness similar to how mean was used above\nrichness = function(x){\n  return(length(x[x>0]))\n}\n\n# Aggregate groups by the site and year then uses the function we created above to calculate richness\nsponge_richness <- aggregate(sponge_averages$x, \n                             by = list(sponge_averages$Group.1, sponge_averages$Group.2), \n                             FUN = richness)\n#***change column headers to match the data in them\n\n# Some data checking for sponges:\n# # Convert to wide form\n# sponge_raw_wideform <- spread(sponge_raw_longform, Taxonomic_Group, Count)\n# # ***Error because spread function doesn't work with duplicate row identifiers***\n# # ***So, need to figure out how to group by site-year\n# # In this case, sometimes the same transect was recorded 3 times in the same year at a given site e.g.:\n# # Transect  Site  Year\n# # 2         muskN 2012\n# # 2         muskN 2012\n# \n# # Check that observations were made at every site for every year\n# # 20 years and 8 sites = 160 observations expected\n# check1 <- unique(sponge_raw_longform$Site_Year)\n# # because check1 has 156 levels, almost every site was visited for all years\n# # After closer inspection, 1993_crab, 2014_pelican, 2017_pelican, and 2017_bigelow are missing\n# \n# # Create new subset for all the times where transect length is not 30 m\n# not30 <-sponge_raw[sponge_raw$Transect.Length..m. != \"30\", 1:7]\n\n\n\n## Import fish datasets (see \"Fish Metadata.docx\" for more information)\nfish_raw <- read.csv(\"fish.csv\", header = T)\n\n# Sometimes site names were entered using different number of spaces. \n# Correct these entry mistakes by making names consistent\nsummary(fish_raw$site)\nfish_raw$site <- revalue(fish_raw$site, c(\"pelican   \" = \"pelican\"))\n\n# Only retain the 8 main sites:\n# Pelican Ghut, Grand Ghut, Crab Cove, Muskmelon, Bigelow, White Bay, Monkey Point, and Guana Head\nfish_raw$site <- as.character(fish_raw$site)\nfish_raw <- fish_raw[fish_raw$site == \"muskN\" | fish_raw$site == \"pelican\" | fish_raw$site == \"crab\" | \n                       fish_raw$site == \"bigelow\" | fish_raw$site == \"monkey\" | fish_raw$site == \"iguana\" |\n                       fish_raw$site == \"white\" | fish_raw$site == \"grand\", ]\nfish_raw$site <- as.factor(fish_raw$site)\n\n# Only retain observations where survey == main\nfish_raw$survey <- as.character(fish_raw$survey)\nfish_raw <- fish_raw[fish_raw$survey == \"main\", ]\nfish_raw$survey <- as.factor(fish_raw$survey)\n\n# Create new column called \"Site_Year\" that combines the year and site as ####_Sitename\nfish_raw <- transform(fish_raw, Site_Year = paste(fish_raw$year, fish_raw$site, sep = \"_\"))\n\n# Create new column in all datasets called Taxa, so if dataframes are combined, I know which dataset the information came from\nfish_raw$Taxa <- \"Fish\"\n\n# Put fish_raw into long form (i.e. so species codes are in a single column rather than having one column for each species code)\n# key = \"title of new column\", value = \"numbers being moved around because of the key\", \n# \":\" specifies which columns should be included in key\nfish_raw_longform <- fish_raw %>% gather(key = \"KEY\", value = \"Count\", popaa:kysea)\n\n# Because the species codes end with j or a to distinguish adult and juveniles,\n# Split new KEY column into species_code and age_class columns\nKEY <- as.character(fish_raw_longform$KEY)\nfish_split <- data.frame(\"Species_Code\" = substr(KEY, 1, (nchar(KEY)-1)), \"Age_Class\" = substr(KEY, nchar(KEY), nchar(KEY)))\n\n# Combine long-form dataset with the split columns dataframe\nfish_raw_longform <- cbind(fish_raw_longform, fish_split)\n\n# Only retain observations where Age_Class == adult\n#***Clear Justification\nfish_raw_longform$Age_Class <- as.character(fish_raw_longform$Age_Class)\nfish_raw_longform <- fish_raw_longform[fish_raw_longform$Age_Class == \"a\", ]\nfish_raw_longform$Age_Class <- as.factor(fish_raw_longform$Age_Class)\n\n# Import fish codes to get common names\nfish_codes <- read.csv(\"fish_codes.csv\", header = T)\n\n# Rename notes column in fish_codes dataframe to avoid confusion with other notes column\ncolnames(fish_codes)[colnames(fish_codes) == \"notes\"] <- \"Fish taxonomy notes\"\n\n# Rename column in fish_codes dataframe to use as a key to merge this information with the raw data\ncolnames(fish_codes)[colnames(fish_codes) == \"new_code\"] <- \"KEY\"\nfish_raw_longform <- merge(fish_raw_longform, fish_codes, by = \"KEY\", all = T)\n\n# # Remove observations where Count is NA\n# #***Are NA's zeroes?\n# fish_raw_longform <- fish_raw_longform[!is.na(fish_raw_longform$Count),]\n\n# Can also make Year a factor instead of an integer\nfish_raw_longform$year <- as.factor(fish_raw_longform$year)\n\n# Summary Information\nstr(fish_raw_longform)\nsummary(fish_raw_longform)\nsummary(fish_raw_longform$site)\nsummary(fish_raw_longform$year)\n# *** There are NA's throughout the dataset. This is definitely a mistake early on in the code that I need to fix.\n\n# Aggregate groups by the site, year, speciescode then averages the counts for each of these\nfish_averages <- aggregate(fish_raw_longform$Count, \n                             by = list(fish_raw_longform$site, fish_raw_longform$year, fish_raw_longform$Species_Code), \n                             FUN = mean)\n#***change column headers to match the data in them\n\n# Aggregate groups by the site and year then uses the function we created above to calculate richness\nfish_richness <- aggregate(fish_averages$x, \n                             by = list(fish_averages$Group.1, fish_averages$Group.2), \n                             FUN = richness)\n#***change column headers to match the data in them\n\n\n# Data checking for fishes\n# # Failed attempts at reformatting data to wide form\n# #***Error because spread function doesn't work with duplicate row identifiers***\n# # Reduce number of columns to convert to wide form\n# fish_raw_longform_reduced <- fish_raw_longform[,c(\"notes\",\"year\", \"month\", \"day\", \"site\", \"transect\", \n#                                                   \"fixed_transect\", \"Count\", \"Species_Code\", \"Family\", \n#                                                   \"common.name\", \"Fish taxonomy notes\", \"Site_Year\", \"Taxa\")]\n# # Keep only the columns that I need to convert to wide form\n# fish_raw_longform_minimum <- fish_raw_longform_reduced[,c(\"notes\", \"year\", \"month\", \"day\", \"site\", \"transect\", \n#                                                           \"fixed_transect\", \"Count\", \"Species_Code\")]\n# # Try using melt\n# fish_raw_wideform_melt <- melt(fish_raw_longform_minimum, id.vars = fish_raw_longform_minimum$Species_Code, measure.vars = fish_raw_longform_minimum$Count,\n#      variable.name = \"variable\")\n# # Convert to wide form\n# fish_raw_wideform <- spread(fish_raw_longform_reduced, Species_Code, Count)\n# fish_raw_wideform_min <- spread(fish_raw_longform_minimum, Species_Code, Count)\n# # Note that there are 2 times more observations now than in the original raw wide format - \n# summary(fish_raw$site)\n# summary(fish_raw_wideform$site)\n# # this is because A/J are in different rows, not listed in different columns\n\n# # Check that observations were made at every site for every year\n# # 25 years and 8 sites = 200 observations expected\n# check2 <- unique(fish_raw_longform_reduced$Site_Year)\n# # because check2 has 200 levels, every site was visited for all 25 years\n# \n# # ***Add transect length from sponge dataset to the corresponding observations in the fish dataset?***\n# summary(fish_raw_longform_reduced$transect)\n# summary(sponge_raw_longform$Transect)\n# # Because the levels are not the same, this may be difficult\n# \n# # Check that all of the counts are integers\n# sum(sponge_raw_longform$Count)\n# sum(fish_raw_longform_reduced$Count)\n# # ***There is definitely a more efficient way to do this***\n# # Because the sum of fish counts has a decimal, create a subset of non-zero counts to ID the culprit\n# fish_nozero <- fish_raw_longform_reduced[fish_raw_longform_reduced$Count != \"0\", ]\n# # Looks like there are some 1.5's and 1.875's, so create a subset that removes these observations to \n# # determine if there are other non-integer values for Count\n# fish_integertest <- fish_nozero[fish_nozero$Count == 1 | fish_nozero$Count >= 2, ]\n# # Now try again,\n# sum(fish_integertest$Count)\n# # From a closer look at the data: 1.5, 1.875, 3.75, 4.5, 7.5, 10.5, 16.5, 19.5, 22.5, 28.5, 31.5, 37.5, and 49.5\n# # are identified as non-integers, but there may be more.\n# \n# # Check that for each Site_Year there are 3 transects\n# sponge_num_transects <- as.data.frame(table(sponge_raw$Site_Year), responseName=\"num_transects\")\n# fish_num_transects <- as.data.frame(table(fish_raw$Site_Year), responseName=\"num_transects\")\n# # Create subsets that only include Site_Year's with more than 3 transects\n# sponge_num_transects <- sponge_num_transects[sponge_num_transects$num_transects > 3, ]\n# fish_num_transects <- fish_num_transects[fish_num_transects$num_transects > 3, ]\n# \n# # ***Check that the transects within a given site-year are not repeated***\n\n\n\n\n\n\n\n\n\n\n## Summary of Importing Datasets\n# *** name of coral data for analysis\n# sponge_raw_longform for analysis\n# fish_raw_longform_reduced for analysis\n\n\n\n## Total Counts\n# Calculate total counts\nsum(sponge_raw_longform$Count)\nsum(fish_raw_longform_reduced$Count) #why is this not a whole #?***\n\n# Total counts by year\naggregate(sponge_raw_longform$Count, by = list(Year = sponge_raw_longform$Year), FUN = sum)\naggregate(fish_raw_longform_reduced$Count, by = list(Year = fish_raw_longform_reduced$year), FUN = sum)\n# ***1992, 1993, and 2014 are not integers\n# ***2016 has a total count of zero\n\n# Total counts by site\naggregate(sponge_raw_longform$Count, by = list(Site = sponge_raw_longform$Site), FUN = sum)\naggregate(fish_raw_longform_reduced$Count, by = list(Site = fish_raw_longform_reduced$site), FUN = sum)\n# ***Grand Ghut, Monkey Pt, Muskmelon, and Pelican Ghut are not integers\n\n# Total counts by Year and Site\nsponge_total_counts <- aggregate(sponge_raw_longform$Count, by = list(Site = sponge_raw_longform$Site, Year = sponge_raw_longform$Year), FUN = sum)\nfish_total_counts <- aggregate(fish_raw_longform_reduced$Count, by = list(Site = fish_raw_longform_reduced$site, Year = fish_raw_longform_reduced$year), FUN = sum)\n\n# Graphing counts by year\n# ggplot(data = sponge_total_counts, aes(sponge_total_counts$Year, sponge_total_counts$x)) +\n#   geom_col()\n# ggplot(data = fish_total_counts, aes(fish_total_counts$Year, fish_total_counts$x)) +\n#   geom_col()\n\n# Graphing counts by site\n# ggplot(data = sponge_total_counts, aes(sponge_total_counts$Site, sponge_total_counts$x)) +\n#   geom_col()\n# ggplot(data = fish_total_counts, aes(fish_total_counts$Site, fish_total_counts$x)) +\n#   geom_col()\n\n# Create new column called Year_Site to use as a key when combining datasets\n# fish_total_counts <- unite_(data = fish_total_counts, col = \"Year_Site\", c(\"Year\", \"Site\"), remove = F)\n# sponge_total_counts <- unite_(data = sponge_total_counts, col = \"Year_Site\", c(\"Year\", \"Site\"), remove = F)\n\n# Combine Datasets\nall_counts <- rbind(fish_total_counts, sponge_total_counts)\n\n# Grouped column charts\nTaxa <- all_counts$Taxa\nggplot(all_counts, aes(fill = Taxa, y = all_counts$x, x = all_counts$Site)) + \n  geom_bar(position = \"dodge\", stat = \"identity\") +\n  xlab(\"Site\") +\n  ylab(\"Count\")\nggplot(all_counts, aes(fill = Taxa, y = all_counts$x, x = all_counts$Year)) + \n  geom_bar(position = \"dodge\", stat = \"identity\") +\n  xlab(\"Year\") +\n  ylab(\"Count\")\n\n# ***build off the following code to create a loop so there is a graph like this for each site\nSite_Names <- c(\"Pelican Ghut\", \"Grand Ghut\", \"Crab Cove\", \"Muskmelon\", \"Bigelow\", \"White Bay\", \"Monkey Pt\", \"Guana Head\")\nBigelow <- all_counts[which(all_counts$Site == \"Bigelow\"),]\nggplot(Bigelow, aes(fill = Taxa, y = Bigelow$x, x = Bigelow$Year)) + \n  geom_bar(position = \"dodge\", stat = \"identity\") +\n  xlab(\"Year\") +\n  ylab(\"Count\")\n\n# ***build off the following code to create a loop so there is a graph like this for each year\nyear_2009 <- all_counts[which(all_counts$Year == \"2009\"),]\nggplot(year_2009, aes(fill = Taxa, y = year_2009$x, x = year_2009$Site)) + \n  geom_bar(position = \"dodge\", stat = \"identity\") +\n  xlab(\"Site\") +\n  ylab(\"Count\")\n\n\n\n",
    "created" : 1551435878644.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1832735537",
    "id" : "A6778502",
    "lastKnownWriteTime" : 1551508643,
    "last_content_update" : 1551508643169,
    "path" : "C:/Users/Nicole/Desktop/Graduate Thesis 3-29-18/Analysis/Models.R",
    "project_path" : "Models.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}