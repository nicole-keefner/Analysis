#                                          xlim = c(0, 30),
#                                          ylim = c(10, 80),
#                                          zlim = c(30, 80))
# Year <- seq(from = min(Guana_Head$Year), to = max(Guana_Head$Year), length.out = 100)
# Rugosity <- seq(from = min(Guana_Head$Rugosity), to = max(Guana_Head$Rugosity), length.out = 100)
# pred_grid <- expand.grid(Year = Year, Rugosity = Rugosity)
# pred_grid$Predicted_Combined_Richness <-predict(object = combined_r_yr, newdata = pred_grid, type = "response")
# predicted_combined_plot <- scatterplot3d(x = pred_grid$Year, y = pred_grid$Rugosity, z = pred_grid$Predicted_Combined_Richness,
#                                          angle = 60,
#                                          color = cb_palette[8],
#                                          pch = 1,
#                                          xlab = "Time (Year) - Guana Head",
#                                          ylab = "Rugosity",
#                                          zlab = "Combined Richness",
#                                          xlim = c(0, 30),
#                                          ylim = c(10, 80),
#                                          zlim = c(30, 80))
# par(mfrow = c(1,1))
# THIS IS THE CODE THAT WORKS TO CREATE A FIGURE OF RUGOSITY VS COMBINED RICHNESS WITH YEAR PREDICTION LINES AND TRUE POINTS WITH A COLOR GRADIENT
combined_complete$True_Year_Factor <- as.character(combined_complete$True_Year_Factor)
combined_complete <- combined_complete[combined_complete$True_Year_Factor != "1992" | combined_complete$True_Year_Factor != "1995" | combined_complete$True_Year_Factor != "1996" |
combined_complete$True_Year_Factor != "1997" | combined_complete$True_Year_Factor != "1998" | combined_complete$True_Year_Factor != "2003", ]
combined_complete$True_Year_Factor <- as.factor(combined_complete$True_Year_Factor)
ctest_model <- glm.nb(formula = Combined_Richness ~ Rugosity + True_Year_Factor, data = sponge_complete)
ctest <- data.frame(
Rugosity = rep(seq(from = min(combined_complete$Rugosity), to = max(combined_complete$Rugosity), length.out = 100), 21),
True_Year_Factor = factor(rep(1:21, each = 100), levels = 1:21, labels = levels(combined_complete$True_Year_Factor)))
ctest <- cbind(ctest, predict(object = ctest_model, newdata = ctest, type = "link", se.fit = TRUE, na.action = na.omit))
# 95% confidence intervals
ctest <- within(ctest, {
Predicted_Combined_Richness <- exp(fit)
LL <- exp(fit - 1.96 * se.fit)
UL <- exp(fit + 1.96 * se.fit)
})
# Figure with prediction lines and true points colored by year
ggplot(data = ctest, aes(x = Rugosity, y = Predicted_Combined_Richness, color = True_Year_Factor)) +
#geom_ribbon(aes(ymin = 0, ymax = 35, fill = Year_Factor), alpha = 0.25) +
geom_line(aes(color = True_Year_Factor), size = 2) +
geom_point(data = combined_complete, size = 3, aes(x = Rugosity, y = Combined_Richness)) +
#scale_color_gradient(low="lightblue", high="darkblue") +
#scale_colour_viridis_d(option = "plasma") +
## Order numbers in legend, but can't use viridis
#scale_colour_discrete(c("1", "2", "3", "8", "9", "10", "11", "13", "14", "15",
#                       "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26")) +
scale_colour_viridis_d() +
labs(x = "Rugosity", y = "Combined Richness", color = "Year") +
theme(text = element_text(size = 18),
panel.grid.major = element_line(colour = "light gray", size = (0.5)),
panel.grid.minor = element_line(colour = "light gray", size = (0.5)),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
###END OF CODE FOR THIS FIGURE
# Note that I created a new model for the sake of creating this figure
combined_r_site_fig_model <- glm.nb(formula = Combined_Richness ~ Rugosity + Site, data = sponge_complete)
combined_r_site_fig <- data.frame(
Rugosity = rep(seq(from = min(sponge_complete$Rugosity), to = max(sponge_complete$Rugosity), length.out = 100), 8),
Site = factor(rep(1:8, each = 100), levels = 1:8, labels = levels(sponge_complete$Site)))
combined_r_site_fig <- cbind(combined_r_site_fig, predict(object = combined_r_site_fig_model, newdata = combined_r_site_fig,
type = "link", se.fit = TRUE))
# 95% confidence intervals
combined_r_site_fig <- within(combined_r_site_fig, {
Predicted_Combined_Richness <- exp(fit)
LL <- exp(fit - 1.96 * se.fit)
UL <- exp(fit + 1.96 * se.fit)
})
# Figure with prediction lines and true points colored by site
ggplot(data = combined_r_site_fig, aes(x = Rugosity, y = Predicted_Combined_Richness, color = Site)) +
#geom_ribbon(aes(ymin = 0, ymax = 35, fill = Site), alpha = 0.25) +
geom_line(aes(color = Site), size = 2) +
geom_point(data = variables, size = 3, aes(x = Rugosity, y = Combined_Richness)) +
#scale_color_gradient(low="lightblue", high="darkblue") +
#scale_colour_viridis_d(option = "plasma") +
scale_colour_viridis_d() +
labs(x = "Rugosity", y = "Combined Richness", color = "Site") +
theme(text = element_text(size = 18),
panel.grid.major = element_line(colour = "light gray", size = (0.5)),
panel.grid.minor = element_line(colour = "light gray", size = (0.5)),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
combined_r_site_fig$Predicted_Combined_Richness_T_Rugosity_Range <- NA
combined_r_site_fig$Predicted_Combined_Richness_T_Rugosity_Range <- as.numeric(combined_r_site_fig$Predicted_Combined_Richness_T_Rugosity_Range)
#i didn't actually use row anywhere
for(row in 1:nrow(combined_r_site_fig)) {
#combined_r_site_fig$Site <- as.character(combined_r_site_fig$Site)
Site <- combined_r_site_fig[row, "Site"]
Rugositee <- combined_r_site_fig[row, "Rugosity"]
#Predicted_Fish_Richness_T_Rugosity_Range <- combined_r_site_fig[row, "Predicted_Fish_Richness_T_Rugosity_Range"]
Predicted_Combined_Richness <- combined_r_site_fig[row, "Predicted_Combined_Richness"]
if(Site == 'bigelow') {
upper = max(bigelowonly$Rugosity)
lower = min(bigelowonly$Rugosity)
} else if(Site == 'crab') {
upper = max(crabonly$Rugosity)
lower = min(crabonly$Rugosity)
} else if(Site == 'grand') {
upper = max(grandonly$Rugosity)
lower = min(grandonly$Rugosity)
} else if(Site == 'iguana') {
upper = max(iguanaonly$Rugosity)
lower = min(iguanaonly$Rugosity)
} else if(Site == 'monkey') {
upper = max(monkeyonly$Rugosity)
lower = min(monkeyonly$Rugosity)
} else if(Site == 'muskN') {
upper = max(muskNonly$Rugosity)
lower = min(muskNonly$Rugosity)
} else if(Site == 'pelican') {
upper = max(pelicanonly$Rugosity)
lower = min(pelicanonly$Rugosity)
} else if(Site == 'white') {
upper = max(whiteonly$Rugosity)
lower = min(whiteonly$Rugosity)
}
if(Rugositee >= lower & Rugositee <= upper) {
combined_r_site_fig[row, "Predicted_Combined_Richness_T_Rugosity_Range"] = Predicted_Combined_Richness
} else {
combined_r_site_fig[row, "Predicted_Combined_Richness_T_Rugosity_Range"] = NA
}
}
# Figure with prediction lines and true points colored by site with lines cut off based on true range of rugosity
ggplot(data = combined_r_site_fig, aes(x = Rugosity, y = Predicted_Combined_Richness_T_Rugosity_Range, color = Site)) +
#geom_ribbon(aes(ymin = 0, ymax = 35, fill = Site), alpha = 0.25) +
geom_line(aes(color = Site), size = 2) +
geom_point(data = variables, size = 3, aes(x = Rugosity, y = Combined_Richness)) +
#scale_color_gradient(low="lightblue", high="darkblue") +
#scale_colour_viridis_d(option = "plasma") +
scale_colour_viridis_d() +
labs(x = "Rugosity", y = "Combined Richness", color = "Site") +
theme(text = element_text(size = 18),
panel.grid.major = element_line(colour = "light gray", size = (0.5)),
panel.grid.minor = element_line(colour = "light gray", size = (0.5)),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
# Below is the updated code, but predicted values now need to be based on the model with year as trend and sites in panels
combined_r_yr_site
combined_newtest <- data.frame(
Rugosity = rep(seq(from = min(variables$Rugosity), to = max(variables$Rugosity), length.out = 100), 216),
Year = rep(seq(from = min(variables$Year), to = max(variables$Year), length.out = 100), 216),
Site = factor(rep(1:8, each = 2700), levels = 1:8, labels = levels(combined_complete$Site)))
combined_newtest <- cbind(combined_newtest, predict(object = combined_r_yr_site, newdata = combined_newtest, type = "link", se.fit = TRUE, na.action = na.omit))
# 95% confidence intervals
combined_newtest <- within(combined_newtest, {
Predicted_Combined_Richness <- exp(fit)
LL <- exp(fit - 1.96 * se.fit)
UL <- exp(fit + 1.96 * se.fit)
})
ggplot(data = combined_newtest, aes(x = Rugosity, y = Predicted_Combined_Richness)) +
geom_point(data = variables, size = 3, aes(x = Rugosity, y = Combined_Richness, color = True_Year_Factor)) +
geom_line(size = 1) +
geom_line(size = 1, linetype = "dashed", aes(x = Rugosity, y = LL)) +
geom_line(size = 1, linetype = "dashed", aes(x = Rugosity, y = UL)) +
#scale_x_continuous(limits = c(0, 65)) +
#scale_y_continuous(limits = c(0, 40)) +
scale_colour_viridis_d() +
labs(x = "Rugosity", y = "Combined Richness", color = "Year") +
theme(text = element_text(size = 18),
panel.grid.major = element_line(colour = "light gray", size = (0.5)),
panel.grid.minor = element_line(colour = "light gray", size = (0.5)),
panel.background = element_blank(),
axis.line = element_line(colour = "black")) +
facet_wrap(facets = ~ Site)
ggplot(data = combined_r_site_fig, aes(x = Rugosity, y = Predicted_Combined_Richness_T_Rugosity_Range, color = Site)) +
#geom_ribbon(aes(ymin = 0, ymax = 35, fill = Site), alpha = 0.25) +
geom_line(aes(color = Site), size = 2) +
geom_point(data = variables, size = 3, aes(x = Rugosity, y = Combined_Richness)) +
#scale_color_gradient(low="lightblue", high="darkblue") +
#scale_colour_viridis_d(option = "plasma") +
scale_colour_viridis_d() +
labs(x = "Rugosity", y = "Combined Richness", color = "Site") +
theme(text = element_text(size = 18),
panel.grid.major = element_line(colour = "light gray", size = (0.5)),
panel.grid.minor = element_line(colour = "light gray", size = (0.5)),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ggplot(data = combined_r_site_fig, aes(x = Rugosity, y = Predicted_Combined_Richness, color = Site)) +
#geom_ribbon(aes(ymin = 0, ymax = 35, fill = Site), alpha = 0.25) +
geom_line(aes(color = Site), size = 2) +
geom_point(data = variables, size = 3, aes(x = Rugosity, y = Combined_Richness)) +
#scale_color_gradient(low="lightblue", high="darkblue") +
#scale_colour_viridis_d(option = "plasma") +
scale_colour_viridis_d() +
labs(x = "Rugosity", y = "Combined Richness", color = "Site") +
theme(text = element_text(size = 18),
panel.grid.major = element_line(colour = "light gray", size = (0.5)),
panel.grid.minor = element_line(colour = "light gray", size = (0.5)),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ggplot(data = ctest, aes(x = Rugosity, y = Predicted_Combined_Richness, color = True_Year_Factor)) +
#geom_ribbon(aes(ymin = 0, ymax = 35, fill = Year_Factor), alpha = 0.25) +
geom_line(aes(color = True_Year_Factor), size = 2) +
geom_point(data = combined_complete, size = 3, aes(x = Rugosity, y = Combined_Richness)) +
#scale_color_gradient(low="lightblue", high="darkblue") +
#scale_colour_viridis_d(option = "plasma") +
## Order numbers in legend, but can't use viridis
#scale_colour_discrete(c("1", "2", "3", "8", "9", "10", "11", "13", "14", "15",
#                       "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26")) +
scale_colour_viridis_d() +
labs(x = "Rugosity", y = "Combined Richness", color = "Year") +
theme(text = element_text(size = 18),
panel.grid.major = element_line(colour = "light gray", size = (0.5)),
panel.grid.minor = element_line(colour = "light gray", size = (0.5)),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ggplot(data = fish_r_site_fig, aes(x = Rugosity, y = Predicted_Fish_Richness_T_Rugosity_Range, color = Site)) +
#geom_ribbon(aes(ymin = 0, ymax = 35, fill = Site), alpha = 0.25) +
geom_line(aes(color = Site), size = 2) +
geom_point(data = variables, size = 3, aes(x = Rugosity, y = Fish_Richness)) +
#scale_color_gradient(low="lightblue", high="darkblue") +
#scale_colour_viridis_d(option = "plasma") +
scale_colour_viridis_d() +
labs(x = "Rugosity", y = "Fish Richness", color = "Site") +
theme(text = element_text(size = 18),
panel.grid.major = element_line(colour = "light gray", size = (0.5)),
panel.grid.minor = element_line(colour = "light gray", size = (0.5)),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
## Figures of competitive models (<2.0 deltaAIC)
# The most parsimonious model for fish richness is fish_site.
# The function of this model is Fish_Richness ~ Site.
# Create new dataframe of predicted values from this model
fish_predictions <- data.frame(
Year = rep(seq(from = min(variables$Year), to = max(variables$Year), length.out = 100), 8),
Site = factor(rep(1:8, each = 100), levels = 1:8, labels =
levels(variables$Site)))
fish_predictions <- cbind(fish_predictions, predict(object = fish_site, newdata = fish_predictions, type = "link", se.fit = TRUE))
fish_predictions <- within(fish_predictions, {
Predicted_Fish_Richness <- exp(fit)
LL <- exp(fit - 1.96 * se.fit)
UL <- exp(fit + 1.96 * se.fit)
})
# Figure 37. Predicted relationship between time and fish richness by site. All sites included. Negative binomial distribution used.
ggplot(data = fish_predictions, aes(x = Year, y = Predicted_Fish_Richness)) +
geom_ribbon(aes(ymin = LL, ymax = UL, fill = Site), alpha = 0.25) +
geom_line(aes(color = Site), size = 2) +
labs(x = "Time (Year)", y = "Predicted Fish Richness") +
scale_color_manual(values = cb_palette) +
theme(text = element_text(size = 18),
panel.grid.major = element_line(colour = "light gray", size = (0.5)),
panel.grid.minor = element_line(colour = "light gray", size = (0.5)),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
# Subset predictions by site
fish_predictions$Site <- as.character(fish_predictions$Site)
fish_predictions_oneoftwo <- fish_predictions[fish_predictions$Site == "pelican" |
fish_predictions$Site == "white" |
fish_predictions$Site == "crab" |
fish_predictions$Site == "iguana", ]
fish_predictions_twooftwo <- fish_predictions[fish_predictions$Site == "monkey" |
fish_predictions$Site == "bigelow" |
fish_predictions$Site == "grand" |
fish_predictions$Site == "muskN", ]
fish_predictions_oneoftwo$Site <- as.factor(fish_predictions_oneoftwo$Site)
fish_predictions_twooftwo$Site <- as.factor(fish_predictions_twooftwo$Site)
fish_predictions$Site <- as.factor(fish_predictions$Site)
#Same as figure 37, but with 4 sites each
predicted_fish_site_A <- ggplot(data = fish_predictions_oneoftwo, aes(x = Year, y = Predicted_Fish_Richness)) +
geom_ribbon(aes(ymin = LL, ymax = UL, fill = Site), alpha = 0.25) +
geom_line(aes(color = Site), size = 2) +
labs(x = "Time (Year)", y = "Predicted Fish Richness") +
scale_y_continuous(limits = c(10, 35)) +
scale_color_manual(values = cb_palette[1:4]) +
theme(text = element_text(size = 18),
panel.grid.major = element_line(colour = "light gray", size = (0.5)),
panel.grid.minor = element_line(colour = "light gray", size = (0.5)),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
predicted_fish_site_B <- ggplot(data = fish_predictions_twooftwo, aes(x = Year, y = Predicted_Fish_Richness)) +
geom_ribbon(aes(ymin = LL, ymax = UL, fill = Site), alpha = 0.25) +
geom_line(aes(color = Site), size = 2) +
labs(x = "Time (Year)", y = "Predicted Fish Richness") +
scale_y_continuous(limits = c(10, 35)) +
scale_color_manual(values = cb_palette[5:8]) +
theme(text = element_text(size = 18),
panel.grid.major = element_line(colour = "light gray", size = (0.5)),
panel.grid.minor = element_line(colour = "light gray", size = (0.5)),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
grid.arrange(predicted_fish_site_A, predicted_fish_site_B, ncol = 2, nrow = 1)
# # Figure 38. Relationship between time and fish richness by site. Negative binomial distribution used.
# ggplot(data = variables, aes(x = Year, y = Fish_Richness)) +
#   geom_point(size = 3)+
#   scale_x_continuous(name = "Time (Year)") +
#   scale_y_continuous(name = "Fish Richness") +
#   geom_smooth(size = 1.2, method = "glm.nb", formula = y ~ x, aes(color = Site)) +
#   scale_color_manual(values = cb_palette) +
#   theme(text = element_text(size=27),
#         panel.grid.major = element_line(colour = "light gray", size = (0.5)),
#         panel.grid.minor = element_line(colour = "light gray", size = (0.5)),
#         panel.background = element_blank(),
#         axis.line = element_line(colour = "black"))
# Note that I created a new model for the sake of creating this figure
fish_r_site_fig_model <- glm.nb(formula = Fish_Richness ~ Rugosity + Site, data = variables)
fish_r_site_fig <- data.frame(
Rugosity = rep(seq(from = min(variables$Rugosity), to = max(variables$Rugosity), length.out = 100), 8),
Site = factor(rep(1:8, each = 100), levels = 1:8, labels = levels(variables$Site)))
fish_r_site_fig_pred <- predict(object = fish_r_site_fig_model, newdata = fish_r_site_fig, type = "link", se.fit = TRUE)
fish_r_site_fig <- cbind(fish_r_site_fig, fish_r_site_fig_pred)
# 95% confidence intervals
fish_r_site_fig <- within(fish_r_site_fig, {
Predicted_Fish_Richness <- exp(fit)
LL <- exp(fit - 1.96 * se.fit)
UL <- exp(fit + 1.96 * se.fit)
})
bigelowonly <- variables[which(variables$Site == "bigelow"),]
crabonly <- variables[which(variables$Site == "crab"),]
grandonly <- variables[which(variables$Site == "grand"),]
iguanaonly <- variables[which(variables$Site == "iguana"),]
monkeyonly <- variables[which(variables$Site == "monkey"),]
muskNonly <- variables[which(variables$Site == "muskN"),]
pelicanonly <- variables[which(variables$Site == "pelican"),]
whiteonly <- variables[which(variables$Site == "white"),]
bigelowonly$Rugosity <- as.numeric(bigelowonly$Rugosity)
crabonly$Rugosity <- as.numeric(crabonly$Rugosity)
grandonly$Rugosity <- as.numeric(grandonly$Rugosity)
iguanaonly$Rugosity <- as.numeric(iguanaonly$Rugosity)
monkeyonly$Rugosity <- as.numeric(monkeyonly$Rugosity)
muskNonly$Rugosity <- as.numeric(muskNonly$Rugosity)
pelicanonly$Rugosity <- as.numeric(pelicanonly$Rugosity)
whiteonly$Rugosity <- as.numeric(whiteonly$Rugosity)
max(pelicanonly$Rugosity)
min(pelicanonly$Rugosity)
######fish_r_site_fig_trueranges <- cbind(fish_r_site_fig, )
fish_r_site_fig$Predicted_Fish_Richness_T_Rugosity_Range <- NA
fish_r_site_fig$Predicted_Fish_Richness_T_Rugosity_Range <- as.numeric(fish_r_site_fig$Predicted_Fish_Richness_T_Rugosity_Range)
#i didn't actually use row anywhere
for(row in 1:nrow(fish_r_site_fig)) {
#fish_r_site_fig$Site <- as.character(fish_r_site_fig$Site)
Site <- fish_r_site_fig[row, "Site"]
Rugositee <- fish_r_site_fig[row, "Rugosity"]
#Predicted_Fish_Richness_T_Rugosity_Range <- fish_r_site_fig[row, "Predicted_Fish_Richness_T_Rugosity_Range"]
Predicted_Fish_Richness <- fish_r_site_fig[row, "Predicted_Fish_Richness"]
if(Site == 'bigelow') {
upper = max(bigelowonly$Rugosity)
lower = min(bigelowonly$Rugosity)
} else if(Site == 'crab') {
upper = max(crabonly$Rugosity)
lower = min(crabonly$Rugosity)
} else if(Site == 'grand') {
upper = max(grandonly$Rugosity)
lower = min(grandonly$Rugosity)
} else if(Site == 'iguana') {
upper = max(iguanaonly$Rugosity)
lower = min(iguanaonly$Rugosity)
} else if(Site == 'monkey') {
upper = max(monkeyonly$Rugosity)
lower = min(monkeyonly$Rugosity)
} else if(Site == 'muskN') {
upper = max(muskNonly$Rugosity)
lower = min(muskNonly$Rugosity)
} else if(Site == 'pelican') {
upper = max(pelicanonly$Rugosity)
lower = min(pelicanonly$Rugosity)
} else if(Site == 'white') {
upper = max(whiteonly$Rugosity)
lower = min(whiteonly$Rugosity)
}
if(Rugositee >= lower & Rugositee <= upper) {
fish_r_site_fig[row, "Predicted_Fish_Richness_T_Rugosity_Range"] = Predicted_Fish_Richness
} else {
fish_r_site_fig[row, "Predicted_Fish_Richness_T_Rugosity_Range"] = NA
}
}
# Figure with prediction lines and true points colored by site with lines cut off based on true range of rugosity
ggplot(data = fish_r_site_fig, aes(x = Rugosity, y = Predicted_Fish_Richness_T_Rugosity_Range, color = Site)) +
#geom_ribbon(aes(ymin = 0, ymax = 35, fill = Site), alpha = 0.25) +
geom_line(aes(color = Site), size = 2) +
geom_point(data = variables, size = 3, aes(x = Rugosity, y = Fish_Richness)) +
#scale_color_gradient(low="lightblue", high="darkblue") +
#scale_colour_viridis_d(option = "plasma") +
scale_colour_viridis_d() +
labs(x = "Rugosity", y = "Fish Richness", color = "Site") +
theme(text = element_text(size = 18),
panel.grid.major = element_line(colour = "light gray", size = (0.5)),
panel.grid.minor = element_line(colour = "light gray", size = (0.5)),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ggplot(data = fish_r_site_fig, aes(x = Rugosity, y = Predicted_Fish_Richness, color = Site)) +
#geom_ribbon(aes(ymin = 0, ymax = 35, fill = Site), alpha = 0.25) +
geom_line(aes(color = Site), size = 2) +
geom_point(data = variables, size = 3, aes(x = Rugosity, y = Fish_Richness)) +
#scale_color_gradient(low="lightblue", high="darkblue") +
#scale_colour_viridis_d(option = "plasma") +
scale_colour_viridis_d() +
labs(x = "Rugosity", y = "Fish Richness", color = "Site") +
theme(text = element_text(size = 18),
panel.grid.major = element_line(colour = "light gray", size = (0.5)),
panel.grid.minor = element_line(colour = "light gray", size = (0.5)),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ggplot(data = sponge_cc_site_fig, aes(x = Percent_Coral_Cover, y = Predicted_Sponge_Richness, color = Site)) +
#geom_ribbon(aes(ymin = 0, ymax = 35, fill = Site), alpha = 0.25) +
geom_line(aes(color = Site), size = 2) +
geom_point(data = variables, size = 3, aes(x = Percent_Coral_Cover, y = Sponge_Richness)) +
#scale_color_gradient(low="lightblue", high="darkblue") +
#scale_colour_viridis_d(option = "plasma") +
scale_colour_viridis_d() +
labs(x = "Coral Cover (%)", y = "Sponge Richness", color = "Site") +
theme(text = element_text(size = 18),
panel.grid.major = element_line(colour = "light gray", size = (0.5)),
panel.grid.minor = element_line(colour = "light gray", size = (0.5)),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ggplot(data = stest, aes(x = Percent_Coral_Cover, y = Predicted_Sponge_Richness, color = True_Year_Factor)) +
#geom_ribbon(aes(ymin = 0, ymax = 35, fill = Year_Factor), alpha = 0.25) +
geom_line(aes(color = True_Year_Factor), size = 2) +
geom_point(data = sponge_complete, size = 3, aes(x = Percent_Coral_Cover, y = Sponge_Richness)) +
#scale_color_gradient(low="lightblue", high="darkblue") +
#scale_colour_viridis_d(option = "plasma") +
## Order numbers in legend, but can't use viridis
#scale_colour_discrete(c("1", "2", "3", "8", "9", "10", "11", "13", "14", "15",
#                       "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26")) +
scale_colour_viridis_d() +
labs(x = "Coral Cover (%)", y = "Sponge Richness", color = "Year") +
theme(text = element_text(size = 18),
panel.grid.major = element_line(colour = "light gray", size = (0.5)),
panel.grid.minor = element_line(colour = "light gray", size = (0.5)),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ggplot(data = coral_test, aes(x = Percent_Coral_Cover, y = Predicted_Coral_Richness, color = True_Year_Factor)) +
#geom_ribbon(aes(ymin = 0, ymax = 35, fill = Year_Factor), alpha = 0.25) +
geom_line(aes(color = True_Year_Factor), size = 2) +
geom_point(data = variables, size = 3, aes(x = Percent_Coral_Cover, y = Coral_Richness)) +
#scale_color_gradient(low="lightblue", high="darkblue") +
#scale_colour_viridis_d(option = "plasma") +
## Order numbers in legend, but can't use viridis
#scale_colour_discrete(c("1", "2", "3", "8", "9", "10", "11", "13", "14", "15",
#                       "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26")) +
scale_colour_viridis_d() +
labs(x = "Coral Cover (%)", y = "Coral Richness", color = "Year") +
theme(text = element_text(size = 18),
panel.grid.major = element_line(colour = "light gray", size = (0.5)),
panel.grid.minor = element_line(colour = "light gray", size = (0.5)),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ggplot(data = variables, aes(x = Percent_Sponge_Cover, y = Percent_Coral_Cover)) +
geom_point(data = variables, size = 3, aes(x = Percent_Sponge_Cover, y = Percent_Coral_Cover)) +
geom_smooth(method = "glm", se = TRUE) +
labs(x = "Sponge Cover (%)", y = "Coral Cover (%)") +
annotate(geom = "text", size = 10, x = 25, y = 55, label = "italic(R) ^ 2 == 0.11", parse = TRUE) +
scale_x_continuous(limits = c(0, 30)) +
scale_y_continuous(limits = c(0, 65)) +
theme(text = element_text(size = 18),
panel.grid.major = element_line(colour = "light gray", size = (0.5)),
panel.grid.minor = element_line(colour = "light gray", size = (0.5)),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ggplot(data = variables, aes(x = Percent_Sponge_Cover, y = Percent_Coral_Cover)) +
geom_point(data = variables, size = 3, aes(x = Percent_Sponge_Cover, y = Percent_Coral_Cover)) +
geom_smooth(method = "lm", se = TRUE) +
labs(x = "Sponge Cover (%)", y = "Coral Cover (%)") +
annotate(geom = "text", size = 10, x = 25, y = 55, label = "italic(R) ^ 2 == 0.11", parse = TRUE) +
scale_x_continuous(limits = c(0, 30)) +
scale_y_continuous(limits = c(0, 65)) +
theme(text = element_text(size = 18),
panel.grid.major = element_line(colour = "light gray", size = (0.5)),
panel.grid.minor = element_line(colour = "light gray", size = (0.5)),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ggplot(data = variables, aes(x = Percent_Coral_Cover, y = Coral_Richness)) +
geom_point(size = 3, color = "gray") +
scale_x_continuous(name = "", limits = c(0, 65)) +
scale_y_continuous(name = "Coral Richness", limits = c(0, 25)) +
#labs(title = "Target: Coral Species Richness") +
annotate(geom = "text", size = 10, x = 50, y = 2.5, label = "italic(R) ['N'] ^ 2 == 0.62", parse = TRUE) +
geom_smooth(size = 1.2, method = "glm.nb", formula = y ~ x, color = "black") +
theme(text = element_text(size = 27),
#plot.title = element_text(size = 22),
panel.grid.major = element_line(colour = "light gray", size = (0.5)),
panel.grid.minor = element_line(colour = "light gray", size = (0.5)),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ggplot(data = variables, aes(x = Percent_Coral_Cover, y = Coral_Richness)) +
geom_point(size = 3, color = "gray") +
scale_x_continuous(name = "", limits = c(0, 65)) +
scale_y_continuous(name = "Coral Richness", limits = c(0, 25)) +
#labs(title = "Target: Coral Species Richness") +
annotate(geom = "text", size = 10, x = 50, y = 2.5, label = "italic(R) ['N'] ^ 2 == 0.62", parse = TRUE) +
geom_smooth(size = 1.2, method = "glm.nb", formula = y ~ x, color = "black") +
theme(text = element_text(size = 27),
#plot.title = element_text(size = 22),
panel.grid.major = element_line(colour = "light gray", size = (0.5)),
panel.grid.minor = element_line(colour = "light gray", size = (0.5)),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ggplot(data = variables, aes(x = Percent_Coral_Cover, y = Coral_Richness)) +
geom_point(size = 3, color = "gray") +
scale_x_continuous(name = "", limits = c(0, 65)) +
scale_y_continuous(name = "Coral Richness", limits = c(0, 25)) +
#labs(title = "Target: Coral Species Richness") +
annotate(geom = "text", size = 10, x = 50, y = 2.5, label = "italic(R) ['N'] ^ 2 == 0.62", parse = TRUE) +
geom_smooth(size = 1.2, method = "glm", formula = y ~ x, color = "black") +
theme(text = element_text(size = 27),
#plot.title = element_text(size = 22),
panel.grid.major = element_line(colour = "light gray", size = (0.5)),
panel.grid.minor = element_line(colour = "light gray", size = (0.5)),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ggplot(data = coral_newtest, aes(x = Percent_Coral_Cover, y = Predicted_Coral_Richness)) +
geom_point(data = variables, size = 3, aes(x = Percent_Coral_Cover, y = Coral_Richness, color = True_Year_Factor)) +
geom_line(size = 2) +
geom_line(size = 2, linetype = "dashed", aes(x = Percent_Coral_Cover, y = LL)) +
geom_line(size = 2, linetype = "dashed", aes(x = Percent_Coral_Cover, y = UL)) +
scale_x_continuous(limits = c(0, 65)) +
scale_y_continuous(limits = c(0, 40)) +
scale_colour_viridis_d() +
labs(x = "Coral Cover (%)", y = "Coral Richness", color = "Year") +
theme(text = element_text(size = 18),
panel.grid.major = element_line(colour = "light gray", size = (0.5)),
panel.grid.minor = element_line(colour = "light gray", size = (0.5)),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
str(variables)
