richness = function(x){
return(length(x[x>0]))
}
coral_richness <- aggregate(coral_averages$x,
by = list(coral_averages$Group.1, coral_averages$Group.2),
FUN = richness)
names(coral_richness) <- c("Site", "Year", "Coral_Richness")
sponge_raw <- read.csv("sponge.csv", header = T)
sponge_raw <- sponge_raw[1:617,1:65]
summary(sponge_raw$Site)
sponge_raw$Site <- revalue(sponge_raw$Site, c("Pelican" = "pelican"))
sponge_raw$Site <- as.character(sponge_raw$Site)
sponge_raw <- sponge_raw[sponge_raw$Site == "muskN" | sponge_raw$Site == "pelican" | sponge_raw$Site == "crab" |
sponge_raw$Site == "bigelow" | sponge_raw$Site == "monkey" | sponge_raw$Site == "iguana" |
sponge_raw$Site == "white" | sponge_raw$Site == "grand", ]
sponge_raw$Site <- as.factor(sponge_raw$Site)
sponge_raw$Notes <- as.character(sponge_raw$Notes)
sponge_raw <- sponge_raw[sponge_raw$Notes != "post-hurricane survey", ]
sponge_raw$Notes <- as.factor(sponge_raw$Notes)
summary(sponge_raw)
sponge_raw$Observer <- as.character(sponge_raw$Observer)
sponge_raw <- sponge_raw[sponge_raw$Observer == "E MacLean" | sponge_raw$Observer == "L Jarecki", ]
sponge_raw$Observer <- as.factor(sponge_raw$Observer)
sponge_raw$Transect <- as.character(sponge_raw$Transect)
sponge_raw <- sponge_raw[sponge_raw$Transect == "1" | sponge_raw$Transect == "2" | sponge_raw$Transect == "3" |
sponge_raw$Transect == "4" | sponge_raw$Transect == "T", ]
sponge_raw$Transect <- as.factor(sponge_raw$Transect)
sponge_raw <- transform(sponge_raw, Site_Year = paste(sponge_raw$Year, sponge_raw$Site, sep="_"))
sponge_raw$Taxa <- "Sponge"
sponge_sample_size <- tally(group_by(sponge_raw, sponge_raw$Site_Year))
colnames(sponge_sample_size)[colnames(sponge_sample_size) == "sponge_raw$Site_Year"] <- "Site_Year"
sponge_raw <- merge(sponge_raw, sponge_sample_size, by = "Site_Year", all = T)
sponge_raw_three <- sponge_raw %>% group_by(sponge_raw$Site_Year) %>% sample_n(imin(3, sponge_raw$n))
sponge_raw_longform <- sponge_raw_three %>%
gather(key = "Taxonomic_Group", value = "Count", Agelas.clathrodes..Agelas.citrina.or.Clathria.faviformis:Black..spiny..purple.exudate.but.not.slimy)
summary(sponge_raw_longform)
sponge_raw_longform$Taxonomic_Group <- as.factor(sponge_raw_longform$Taxonomic_Group)
sponge_raw_longform$Year <- as.factor(sponge_raw_longform$Year)
str(sponge_raw_longform)
summary(sponge_raw_longform)
summary(sponge_raw_longform$Site)
summary(sponge_raw_longform$Year)
sponge_averages <- aggregate(sponge_raw_longform$Count,
by = list(sponge_raw_longform$Site, sponge_raw_longform$Year, sponge_raw_longform$Taxonomic_Group),
FUN = mean)
sponge_richness <- aggregate(sponge_averages$x,
by = list(sponge_averages$Group.1, sponge_averages$Group.2),
FUN = richness)
names(sponge_richness) <- c("Site", "Year", "Sponge_Richness")
fish_raw <- read.csv("fish.csv", header = T)
summary(fish_raw$site)
fish_raw$site <- revalue(fish_raw$site, c("pelican   " = "pelican"))
fish_raw$site <- as.character(fish_raw$site)
fish_raw <- fish_raw[fish_raw$site == "muskN" | fish_raw$site == "pelican" | fish_raw$site == "crab" |
fish_raw$site == "bigelow" | fish_raw$site == "monkey" | fish_raw$site == "iguana" |
fish_raw$site == "white" | fish_raw$site == "grand", ]
fish_raw$site <- as.factor(fish_raw$site)
fish_raw$survey <- as.character(fish_raw$survey)
fish_raw <- fish_raw[fish_raw$survey == "main", ]
fish_raw$survey <- as.factor(fish_raw$survey)
fish_raw <- transform(fish_raw, Site_Year = paste(fish_raw$year, fish_raw$site, sep = "_"))
fish_raw$Taxa <- "Fish"
fish_sample_size <- tally(group_by(fish_raw, fish_raw$Site_Year))
colnames(fish_sample_size)[colnames(fish_sample_size) == "fish_raw$Site_Year"] <- "Site_Year"
fish_raw <- merge(fish_raw, fish_sample_size, by = "Site_Year", all = T)
fish_raw_three <- fish_raw %>% group_by(fish_raw$Site_Year) %>% sample_n(imin(3, fish_raw$n))
fish_raw_longform <- fish_raw_three %>% gather(key = "KEY", value = "Count", popaa:kysea)
KEY <- as.character(fish_raw_longform$KEY)
fish_split <- data.frame("Species_Code" = substr(KEY, 1, (nchar(KEY)-1)), "Age_Class" = substr(KEY, nchar(KEY), nchar(KEY)))
fish_raw_longform <- cbind(fish_raw_longform, fish_split)
View(fish_split)
View(fish_raw_longform)
View(fish_raw_longform)
fish_raw_longform <- fish_raw_three %>% gather(key = "KEY", value = "Count", popaa:kysea)
View(fish_raw_longform)
KEY <- as.character(fish_raw_longform$KEY)
fish_split <- data.frame("Species_Code" = substr(KEY, 1, (nchar(KEY)-1)), "Age_Class" = substr(KEY, nchar(KEY), nchar(KEY)))
fish_raw_longform <- cbind(fish_raw_longform, fish_split)
View(fish_split)
fish_raw_longform <- fish_raw_three %>% gather(key = "KEY", value = "Count", popaa:kysea)
test <- merge(fish_raw_longform, fish_split)
fish_raw_longform$Age_Class <- as.character(fish_raw_longform$Age_Class)
fish_raw_longform <- cbind(fish_raw_longform, fish_split)
### Nicole Keefner
### Master's Thesis
## Use *** to search for errors in the code or areas that need more work
## Set Working Directory
## Install packages
## Load packages
library(tidyverse)
library(tidyr)
library(plyr)
library(dplyr)
library(ggplot2)
library(reshape2)
## Import coral dataset
benthic_raw <- read.csv("benthic.csv", header = T)
# Only select rows and columns for which there are values entered (benthic_raw has extraneous rows)
benthic_raw <- benthic_raw[1:1053,1:137]
# Only retain the 8 main sites:
# Pelican Ghut, Grand Ghut, Crab Cove, Muskmelon, Bigelow, White Bay, Monkey Point, and Guana Head
benthic_raw$site <- as.character(benthic_raw$site)
benthic_raw <- benthic_raw[benthic_raw$site == "muskN" | benthic_raw$site == "pelican" | benthic_raw$site == "crab" |
benthic_raw$site == "bigelow" | benthic_raw$site == "monkey" | benthic_raw$site == "iguana" |
benthic_raw$site == "white" | benthic_raw$site == "grand", ]
benthic_raw$site <- as.factor(benthic_raw$site)
# Remove RLF as an observer because in 2014 there were two observers
benthic_raw$observer <- as.character(benthic_raw$observer)
benthic_raw <- benthic_raw[benthic_raw$observer != "RLF", ]
benthic_raw$observer <- as.factor(benthic_raw$observer)
# Only retain observations where survey == main
benthic_raw$survey <- as.character(benthic_raw$survey)
benthic_raw <- benthic_raw[benthic_raw$survey == "main", ]
benthic_raw$survey <- as.factor(benthic_raw$survey)
# Create new column called "Site_Year" that combines the year and site as ####_Sitename
benthic_raw <- transform(benthic_raw, Site_Year = paste(benthic_raw$year, benthic_raw$site, sep="_"))
# Create new column in all datasets called Taxa, so if dataframes are combined, I know which dataset the information came from
benthic_raw$Taxa <- "Coral"
# Put dataset into long form (i.e. so species codes are in a single column rather than having one column for each species code)
# key = "title of new column", value = "numbers being moved around because of the key",
# ":" specifies which columns should be included in key
benthic_raw_longform <- benthic_raw %>%
gather(key = "Taxonomic_Group", value = "Count", acpa:sosp)
# Double-check
summary(benthic_raw_longform)
# Taxonomic_Group is being read as a character, but it should be a factor
# overwrite column so it is a factor
benthic_raw_longform$Taxonomic_Group <- as.factor(benthic_raw_longform$Taxonomic_Group)
# Can also make Year a factor instead of an integer
benthic_raw_longform$year <- as.factor(benthic_raw_longform$year)
# Summary Information
str(benthic_raw_longform)
summary(benthic_raw_longform)
summary(benthic_raw_longform$site)
summary(benthic_raw_longform$year)
# Aggregate groups by the site and year then averages the percent covers for each of these across all transects
coral_percentcover <- aggregate(benthic_raw_longform$livecoral_all_cover,
by = list(benthic_raw_longform$site, benthic_raw_longform$year),
FUN = mean)
# Double-check environment to make sure output makes sense: 8sites*27years = 216 values for percentcover
# Rename columns to match the data in them
names(coral_percentcover) <- c("Site", "Year", "Percent_Coral_Cover")
# Aggregate groups by the site, year, taxgroup then averages the counts for each of these across all transects
coral_averages <- aggregate(benthic_raw_longform$Count,
by = list(benthic_raw_longform$site, benthic_raw_longform$year, benthic_raw_longform$Taxonomic_Group),
FUN = mean)
# Double-check environment to make sure output makes sense: 8sites*27years*32taxgroups = 6912 averages
#***change column headers to match the data in them
# Define new function to use in the aggregate function to calculate richness similar to how mean was used above
richness = function(x){
return(length(x[x>0]))
}
# Aggregate groups by the site and year then uses the function we created above to calculate richness
coral_richness <- aggregate(coral_averages$x,
by = list(coral_averages$Group.1, coral_averages$Group.2),
FUN = richness)
# Double-check environment to make sure output makes sense: 8sites*27years = 216 values for richness
# Rename columns to match the data in them
names(coral_richness) <- c("Site", "Year", "Coral_Richness")
## Import sponge dataset
sponge_raw <- read.csv("sponge.csv", header = T)
# Only select rows and columns for which there are values entered (sponge_raw has extraneous rows and columns)
sponge_raw <- sponge_raw[1:617,1:65]
# Sometimes site names were entered using different capitalization.
# Correct these entry mistakes by making names consistent
summary(sponge_raw$Site)
sponge_raw$Site <- revalue(sponge_raw$Site, c("Pelican" = "pelican"))
# Only retain the 8 main sites:
# Pelican Ghut, Grand Ghut, Crab Cove, Muskmelon, Bigelow, White Bay, Monkey Point, and Guana Head
sponge_raw$Site <- as.character(sponge_raw$Site)
sponge_raw <- sponge_raw[sponge_raw$Site == "muskN" | sponge_raw$Site == "pelican" | sponge_raw$Site == "crab" |
sponge_raw$Site == "bigelow" | sponge_raw$Site == "monkey" | sponge_raw$Site == "iguana" |
sponge_raw$Site == "white" | sponge_raw$Site == "grand", ]
sponge_raw$Site <- as.factor(sponge_raw$Site)
# Remove October 2017 post-hurricane survey information
sponge_raw$Notes <- as.character(sponge_raw$Notes)
sponge_raw <- sponge_raw[sponge_raw$Notes != "post-hurricane survey", ]
sponge_raw$Notes <- as.factor(sponge_raw$Notes)
# Some "ghost" factors are being retained for transect and observer
# Remove these ghost factors
summary(sponge_raw)
sponge_raw$Observer <- as.character(sponge_raw$Observer)
sponge_raw <- sponge_raw[sponge_raw$Observer == "E MacLean" | sponge_raw$Observer == "L Jarecki", ]
sponge_raw$Observer <- as.factor(sponge_raw$Observer)
sponge_raw$Transect <- as.character(sponge_raw$Transect)
sponge_raw <- sponge_raw[sponge_raw$Transect == "1" | sponge_raw$Transect == "2" | sponge_raw$Transect == "3" |
sponge_raw$Transect == "4" | sponge_raw$Transect == "T", ]
sponge_raw$Transect <- as.factor(sponge_raw$Transect)
# Create new column called "Site_Year" that combines the year and site as ####_Sitename
sponge_raw <- transform(sponge_raw, Site_Year = paste(sponge_raw$Year, sponge_raw$Site, sep="_"))
# Create new column in all datasets called Taxa, so if dataframes are combined, I know which dataset the information came from
sponge_raw$Taxa <- "Sponge"
# Put dataset into long form (i.e. so species codes are in a single column rather than having one column for each species code)
# key = "title of new column", value = "numbers being moved around because of the key",
# ":" specifies which columns should be included in key
sponge_raw_longform <- sponge_raw %>%
gather(key = "Taxonomic_Group", value = "Count", Agelas.clathrodes..Agelas.citrina.or.Clathria.faviformis:Black..spiny..purple.exudate.but.not.slimy)
# Double-check
summary(sponge_raw_longform)
# Taxonomic_Group is being read as a character, but it should be a factor
# overwrite column so it is a factor
sponge_raw_longform$Taxonomic_Group <- as.factor(sponge_raw_longform$Taxonomic_Group)
# Can also make Year a factor instead of an integer
sponge_raw_longform$Year <- as.factor(sponge_raw_longform$Year)
# ***When transect length is 20 m, multiply counts by 3/2
#tlength_short <- sponge_raw[sponge_raw$Transect.Length..m. == "20", ]
# Summary Information
str(sponge_raw_longform)
summary(sponge_raw_longform)
summary(sponge_raw_longform$Site)
summary(sponge_raw_longform$Year)
# Aggregate groups by the site, year, taxgroup then averages the counts for each of these across all transects
sponge_averages <- aggregate(sponge_raw_longform$Count,
by = list(sponge_raw_longform$Site, sponge_raw_longform$Year, sponge_raw_longform$Taxonomic_Group),
FUN = mean)
# Double-check environment to make sure output makes sense: (8sites*20years - 4site_yearsthatweren'tsurveyed)*58taxgroups = 9048 averages
#***change column headers to match the data in them
# Aggregate groups by the site and year then uses the function we created above to calculate richness
sponge_richness <- aggregate(sponge_averages$x,
by = list(sponge_averages$Group.1, sponge_averages$Group.2),
FUN = richness)
# Double-check environment to make sure output makes sense: 8sites*20years - 4site_yearsthatweren'tsurveyed = 156 averages
# Rename columns to match the data in them
names(sponge_richness) <- c("Site", "Year", "Sponge_Richness")
# Some data checking for sponges:
# # Convert to wide form
# sponge_raw_wideform <- spread(sponge_raw_longform, Taxonomic_Group, Count)
# # ***Error because spread function doesn't work with duplicate row identifiers***
# # ***So, need to figure out how to group by site-year
# # In this case, sometimes the same transect was recorded 3 times in the same year at a given site e.g.:
# # Transect  Site  Year
# # 2         muskN 2012
# # 2         muskN 2012
#
# # Check that observations were made at every site for every year
# # 20 years and 8 sites = 160 observations expected
# check1 <- unique(sponge_raw_longform$Site_Year)
# # because check1 has 156 levels, almost every site was visited for all years
# # After closer inspection, 1993_crab, 2014_pelican, 2017_pelican, and 2017_bigelow are missing
#
# # Create new subset for all the times where transect length is not 30 m
#not30 <-sponge_raw[sponge_raw$Transect.Length..m. != "30", 1:7]
## Import fish datasets (see "Fish Metadata.docx" for more information)
fish_raw <- read.csv("fish.csv", header = T)
# Sometimes site names were entered using different number of spaces.
# Correct these entry mistakes by making names consistent
summary(fish_raw$site)
fish_raw$site <- revalue(fish_raw$site, c("pelican   " = "pelican"))
# Only retain the 8 main sites:
# Pelican Ghut, Grand Ghut, Crab Cove, Muskmelon, Bigelow, White Bay, Monkey Point, and Guana Head
fish_raw$site <- as.character(fish_raw$site)
fish_raw <- fish_raw[fish_raw$site == "muskN" | fish_raw$site == "pelican" | fish_raw$site == "crab" |
fish_raw$site == "bigelow" | fish_raw$site == "monkey" | fish_raw$site == "iguana" |
fish_raw$site == "white" | fish_raw$site == "grand", ]
fish_raw$site <- as.factor(fish_raw$site)
# Only retain observations where survey == main
fish_raw$survey <- as.character(fish_raw$survey)
fish_raw <- fish_raw[fish_raw$survey == "main", ]
fish_raw$survey <- as.factor(fish_raw$survey)
# Create new column called "Site_Year" that combines the year and site as ####_Sitename
fish_raw <- transform(fish_raw, Site_Year = paste(fish_raw$year, fish_raw$site, sep = "_"))
# Create new column in all datasets called Taxa, so if dataframes are combined, I know which dataset the information came from
fish_raw$Taxa <- "Fish"
# Put fish_raw into long form (i.e. so species codes are in a single column rather than having one column for each species code)
# key = "title of new column", value = "numbers being moved around because of the key",
# ":" specifies which columns should be included in key
fish_raw_longform <- fish_raw %>% gather(key = "KEY", value = "Count", popaa:kysea)
# Because the species codes end with j or a to distinguish adult and juveniles,
# Split new KEY column into species_code and age_class columns
KEY <- as.character(fish_raw_longform$KEY)
fish_split <- data.frame("Species_Code" = substr(KEY, 1, (nchar(KEY)-1)), "Age_Class" = substr(KEY, nchar(KEY), nchar(KEY)))
# Combine long-form dataset with the split columns dataframe
fish_raw_longform <- cbind(fish_raw_longform, fish_split)
KEY <- as.character(fish_raw_longform$KEY)
fish_split <- data.frame("Species_Code" = substr(KEY, 1, (nchar(KEY)-1)), "Age_Class" = substr(KEY, nchar(KEY), nchar(KEY)))
fish_raw_longform <- cbind(fish_raw_longform, fish_split)
View(fish_raw_longform)
fish_raw_longform$Age_Class
fish_raw_longform$Age_Class <- as.character(fish_raw_longform$Age_Class)
fish_raw_longform <- fish_raw_longform[fish_raw_longform$Age_Class == "a", ]
fish_raw_longform$Age_Class <- as.factor(fish_raw_longform$Age_Class)
fish_codes <- read.csv("fish_codes.csv", header = T)
colnames(fish_codes)[colnames(fish_codes) == "notes"] <- "Fish taxonomy notes"
### Nicole Keefner
### Master's Thesis
## Use *** to search for errors in the code or areas that need more work
## Set Working Directory
## Install packages
## Load packages
library(tidyverse)
library(tidyr)
library(plyr)
library(dplyr)
library(ggplot2)
library(reshape2)
## Import coral dataset
benthic_raw <- read.csv("benthic.csv", header = T)
# Only select rows and columns for which there are values entered (benthic_raw has extraneous rows)
benthic_raw <- benthic_raw[1:1053,1:137]
# Only retain the 8 main sites:
# Pelican Ghut, Grand Ghut, Crab Cove, Muskmelon, Bigelow, White Bay, Monkey Point, and Guana Head
benthic_raw$site <- as.character(benthic_raw$site)
benthic_raw <- benthic_raw[benthic_raw$site == "muskN" | benthic_raw$site == "pelican" | benthic_raw$site == "crab" |
benthic_raw$site == "bigelow" | benthic_raw$site == "monkey" | benthic_raw$site == "iguana" |
benthic_raw$site == "white" | benthic_raw$site == "grand", ]
benthic_raw$site <- as.factor(benthic_raw$site)
# Remove RLF as an observer because in 2014 there were two observers
benthic_raw$observer <- as.character(benthic_raw$observer)
benthic_raw <- benthic_raw[benthic_raw$observer != "RLF", ]
benthic_raw$observer <- as.factor(benthic_raw$observer)
# Only retain observations where survey == main
benthic_raw$survey <- as.character(benthic_raw$survey)
benthic_raw <- benthic_raw[benthic_raw$survey == "main", ]
benthic_raw$survey <- as.factor(benthic_raw$survey)
# Create new column called "Site_Year" that combines the year and site as ####_Sitename
benthic_raw <- transform(benthic_raw, Site_Year = paste(benthic_raw$year, benthic_raw$site, sep="_"))
# Create new column in all datasets called Taxa, so if dataframes are combined, I know which dataset the information came from
benthic_raw$Taxa <- "Coral"
# Create a new dataframe with the number (n) of transects for each Site_Year
coral_sample_size <- tally(group_by(benthic_raw, benthic_raw$Site_Year))
# Rename column in sample_size_coral dataframe to use as a key to merge this information with the raw data
colnames(coral_sample_size)[colnames(coral_sample_size) == "benthic_raw$Site_Year"] <- "Site_Year"
benthic_raw <- merge(benthic_raw, coral_sample_size, by = "Site_Year", all = T)
# Create a new function called imin that returns the minimum of 2 values
imin <- function(x, y){
if (x > y){
return(y)
}
return(x)
}
# Randomly select 3 transects for each Site_Year
# If there are <3 transects sampled, the number that were sampled will remain constant
benthic_raw_three <- benthic_raw %>% group_by(benthic_raw$Site_Year) %>% sample_n(imin(3, benthic_raw$n))
# Double-check: coral_sample_size should have 215 obs. (different Site_Year's), so benthic_raw_three should have 645 obs.
# Put dataset into long form (i.e. so species codes are in a single column rather than having one column for each species code)
# key = "title of new column", value = "numbers being moved around because of the key",
# ":" specifies which columns should be included in key
benthic_raw_longform <- benthic_raw_three %>%
gather(key = "Taxonomic_Group", value = "Count", acpa:sosp)
# Double-check
summary(benthic_raw_longform)
# Taxonomic_Group is being read as a character, but it should be a factor
# overwrite column so it is a factor
benthic_raw_longform$Taxonomic_Group <- as.factor(benthic_raw_longform$Taxonomic_Group)
# Can also make Year a factor instead of an integer
benthic_raw_longform$year <- as.factor(benthic_raw_longform$year)
# Summary Information
str(benthic_raw_longform)
summary(benthic_raw_longform)
summary(benthic_raw_longform$site)
summary(benthic_raw_longform$year)
# Aggregate groups by the site and year then averages the percent covers for each of these across all transects
coral_percentcover <- aggregate(benthic_raw_longform$livecoral_all_cover,
by = list(benthic_raw_longform$site, benthic_raw_longform$year),
FUN = mean)
# Double-check environment to make sure output makes sense: 8sites*27years = 216 values for percentcover
# Rename columns to match the data in them
names(coral_percentcover) <- c("Site", "Year", "Percent_Coral_Cover")
# Aggregate groups by the site, year, taxgroup then averages the counts for each of these across all transects
coral_averages <- aggregate(benthic_raw_longform$Count,
by = list(benthic_raw_longform$site, benthic_raw_longform$year, benthic_raw_longform$Taxonomic_Group),
FUN = mean)
# Double-check environment to make sure output makes sense: 8sites*27years*32taxgroups = 6912 averages
#***change column headers to match the data in them
# Define new function to use in the aggregate function to calculate richness similar to how mean was used above
richness = function(x){
return(length(x[x>0]))
}
# Aggregate groups by the site and year then uses the function we created above to calculate richness
coral_richness <- aggregate(coral_averages$x,
by = list(coral_averages$Group.1, coral_averages$Group.2),
FUN = richness)
# Double-check environment to make sure output makes sense: 8sites*27years = 216 values for richness
# Rename columns to match the data in them
names(coral_richness) <- c("Site", "Year", "Coral_Richness")
## Import sponge dataset
sponge_raw <- read.csv("sponge.csv", header = T)
# Only select rows and columns for which there are values entered (sponge_raw has extraneous rows and columns)
sponge_raw <- sponge_raw[1:617,1:65]
# Sometimes site names were entered using different capitalization.
# Correct these entry mistakes by making names consistent
summary(sponge_raw$Site)
sponge_raw$Site <- revalue(sponge_raw$Site, c("Pelican" = "pelican"))
# Only retain the 8 main sites:
# Pelican Ghut, Grand Ghut, Crab Cove, Muskmelon, Bigelow, White Bay, Monkey Point, and Guana Head
sponge_raw$Site <- as.character(sponge_raw$Site)
sponge_raw <- sponge_raw[sponge_raw$Site == "muskN" | sponge_raw$Site == "pelican" | sponge_raw$Site == "crab" |
sponge_raw$Site == "bigelow" | sponge_raw$Site == "monkey" | sponge_raw$Site == "iguana" |
sponge_raw$Site == "white" | sponge_raw$Site == "grand", ]
sponge_raw$Site <- as.factor(sponge_raw$Site)
# Remove October 2017 post-hurricane survey information
sponge_raw$Notes <- as.character(sponge_raw$Notes)
sponge_raw <- sponge_raw[sponge_raw$Notes != "post-hurricane survey", ]
sponge_raw$Notes <- as.factor(sponge_raw$Notes)
# Some "ghost" factors are being retained for transect and observer
# Remove these ghost factors
summary(sponge_raw)
sponge_raw$Observer <- as.character(sponge_raw$Observer)
sponge_raw <- sponge_raw[sponge_raw$Observer == "E MacLean" | sponge_raw$Observer == "L Jarecki", ]
sponge_raw$Observer <- as.factor(sponge_raw$Observer)
sponge_raw$Transect <- as.character(sponge_raw$Transect)
sponge_raw <- sponge_raw[sponge_raw$Transect == "1" | sponge_raw$Transect == "2" | sponge_raw$Transect == "3" |
sponge_raw$Transect == "4" | sponge_raw$Transect == "T", ]
sponge_raw$Transect <- as.factor(sponge_raw$Transect)
# Create new column called "Site_Year" that combines the year and site as ####_Sitename
sponge_raw <- transform(sponge_raw, Site_Year = paste(sponge_raw$Year, sponge_raw$Site, sep="_"))
# Create new column in all datasets called Taxa, so if dataframes are combined, I know which dataset the information came from
sponge_raw$Taxa <- "Sponge"
# Create a new dataframe with the number (n) of transects for each Site_Year
sponge_sample_size <- tally(group_by(sponge_raw, sponge_raw$Site_Year))
# Rename column in sample_size_sponge dataframe to use as a key to merge this information with the raw data
colnames(sponge_sample_size)[colnames(sponge_sample_size) == "sponge_raw$Site_Year"] <- "Site_Year"
sponge_raw <- merge(sponge_raw, sponge_sample_size, by = "Site_Year", all = T)
# Randomly select 3 transects for each Site_Year
# If there are <3 transects sampled, the number that were sampled will remain constant (using imin function created above)
sponge_raw_three <- sponge_raw %>% group_by(sponge_raw$Site_Year) %>% sample_n(imin(3, sponge_raw$n))
# Double-check: sponge_sample_size should have 164 obs. (different Site_Year's), so sponge_raw_three should have 492 obs.
# Put dataset into long form (i.e. so species codes are in a single column rather than having one column for each species code)
# key = "title of new column", value = "numbers being moved around because of the key",
# ":" specifies which columns should be included in key
sponge_raw_longform <- sponge_raw_three %>%
gather(key = "Taxonomic_Group", value = "Count", Agelas.clathrodes..Agelas.citrina.or.Clathria.faviformis:Black..spiny..purple.exudate.but.not.slimy)
# Double-check
summary(sponge_raw_longform)
# Taxonomic_Group is being read as a character, but it should be a factor
# overwrite column so it is a factor
sponge_raw_longform$Taxonomic_Group <- as.factor(sponge_raw_longform$Taxonomic_Group)
# Can also make Year a factor instead of an integer
sponge_raw_longform$Year <- as.factor(sponge_raw_longform$Year)
# ***When transect length is 20 m, multiply counts by 3/2
#tlength_short <- sponge_raw[sponge_raw$Transect.Length..m. == "20", ]
# Summary Information
str(sponge_raw_longform)
summary(sponge_raw_longform)
summary(sponge_raw_longform$Site)
summary(sponge_raw_longform$Year)
# Aggregate groups by the site, year, taxgroup then averages the counts for each of these across all transects
sponge_averages <- aggregate(sponge_raw_longform$Count,
by = list(sponge_raw_longform$Site, sponge_raw_longform$Year, sponge_raw_longform$Taxonomic_Group),
FUN = mean)
# Double-check environment to make sure output makes sense: (8sites*20years - 4site_yearsthatweren'tsurveyed)*58taxgroups = 9048 averages
#***change column headers to match the data in them
# Aggregate groups by the site and year then uses the function we created above to calculate richness
sponge_richness <- aggregate(sponge_averages$x,
by = list(sponge_averages$Group.1, sponge_averages$Group.2),
FUN = richness)
# Double-check environment to make sure output makes sense: 8sites*20years - 4site_yearsthatweren'tsurveyed = 156 averages
# Rename columns to match the data in them
names(sponge_richness) <- c("Site", "Year", "Sponge_Richness")
# Some data checking for sponges:
# # Convert to wide form
# sponge_raw_wideform <- spread(sponge_raw_longform, Taxonomic_Group, Count)
# # ***Error because spread function doesn't work with duplicate row identifiers***
# # ***So, need to figure out how to group by site-year
# # In this case, sometimes the same transect was recorded 3 times in the same year at a given site e.g.:
# # Transect  Site  Year
# # 2         muskN 2012
# # 2         muskN 2012
#
# # Check that observations were made at every site for every year
# # 20 years and 8 sites = 160 observations expected
# check1 <- unique(sponge_raw_longform$Site_Year)
# # because check1 has 156 levels, almost every site was visited for all years
# # After closer inspection, 1993_crab, 2014_pelican, 2017_pelican, and 2017_bigelow are missing
#
# # Create new subset for all the times where transect length is not 30 m
#not30 <-sponge_raw[sponge_raw$Transect.Length..m. != "30", 1:7]
## Import fish datasets (see "Fish Metadata.docx" for more information)
fish_raw <- read.csv("fish.csv", header = T)
# Sometimes site names were entered using different number of spaces.
# Correct these entry mistakes by making names consistent
summary(fish_raw$site)
fish_raw$site <- revalue(fish_raw$site, c("pelican   " = "pelican"))
# Only retain the 8 main sites:
# Pelican Ghut, Grand Ghut, Crab Cove, Muskmelon, Bigelow, White Bay, Monkey Point, and Guana Head
fish_raw$site <- as.character(fish_raw$site)
fish_raw <- fish_raw[fish_raw$site == "muskN" | fish_raw$site == "pelican" | fish_raw$site == "crab" |
fish_raw$site == "bigelow" | fish_raw$site == "monkey" | fish_raw$site == "iguana" |
fish_raw$site == "white" | fish_raw$site == "grand", ]
fish_raw$site <- as.factor(fish_raw$site)
# Only retain observations where survey == main
fish_raw$survey <- as.character(fish_raw$survey)
fish_raw <- fish_raw[fish_raw$survey == "main", ]
fish_raw$survey <- as.factor(fish_raw$survey)
# Create new column called "Site_Year" that combines the year and site as ####_Sitename
fish_raw <- transform(fish_raw, Site_Year = paste(fish_raw$year, fish_raw$site, sep = "_"))
# Create new column in all datasets called Taxa, so if dataframes are combined, I know which dataset the information came from
fish_raw$Taxa <- "Fish"
# Create a new dataframe with the number (n) of transects for each Site_Year
fish_sample_size <- tally(group_by(fish_raw, fish_raw$Site_Year))
# Rename column in sample_size_fish dataframe to use as a key to merge this information with the raw data
colnames(fish_sample_size)[colnames(fish_sample_size) == "fish_raw$Site_Year"] <- "Site_Year"
fish_raw <- merge(fish_raw, fish_sample_size, by = "Site_Year", all = T)
# Randomly select 3 transects for each Site_Year
# If there are <3 transects sampled, the number that were sampled will remain constant (using imin function created above)
fish_raw_three <- fish_raw %>% group_by(fish_raw$Site_Year) %>% sample_n(imin(3, fish_raw$n))
# Double-check: fish_sample_size should have 216 obs. (different Site_Year's), so benthic_raw_three should have 648 obs.
# Put fish_raw into long form (i.e. so species codes are in a single column rather than having one column for each species code)
# key = "title of new column", value = "numbers being moved around because of the key",
# ":" specifies which columns should be included in key
fish_raw_longform <- fish_raw_three %>% gather(key = "KEY", value = "Count", popaa:kysea)
# Because the species codes end with j or a to distinguish adult and juveniles,
# Split new KEY column into species_code and age_class columns
KEY <- as.character(fish_raw_longform$KEY)
fish_split <- data.frame("Species_Code" = substr(KEY, 1, (nchar(KEY)-1)), "Age_Class" = substr(KEY, nchar(KEY), nchar(KEY)))
# Combine long-form dataset with the split columns dataframe
fish_raw_longform <- cbind(fish_raw_longform, fish_split)
fish_raw_longform <- fish_raw_three %>% gather(key = "KEY", value = "Count", popaa:kysea)
KEY <- as.character(fish_raw_longform$KEY)
fish_split <- data.frame("Species_Code" = substr(KEY, 1, (nchar(KEY)-1)), "Age_Class" = substr(KEY, nchar(KEY), nchar(KEY)))
View(fish_raw_longform)
View(fish_split)
