plot(x = fr_yr_mu, y = fr_yr_response, main = "Response residuals")
plot(x = fr_yr_mu, y = fr_yr_pearson, main = "Pearson residuals")
plot(x = fr_yr_mu, y = fr_yr_scaled, main = "Pearson residuals scaled")
plot(x = fr_yr_mu, y = fr_yr_deviance, main = "Deviance residuals")
par(op)
#fr_st
fr_st = glm.nb(formula = Fish_Richness ~ Site, data = variables)
fr_st_pearson <- residuals(object = fr_st, type = "pearson")
fr_st_deviance <- residuals(object = fr_st, type = "deviance")
fr_st_mu <- predict(fr_st, type = "response")
fr_st_response <- variables$Fish_Richness - fr_st_mu
fr_st_scaled <- fr_st_response / sqrt(7.630148 * fr_st_mu)
# The authors explain that they have to manually scale the residuals because the residual function doesn't account
# for overdispersion, however, I'm not sure why they used 7.63... in this calculation.
op <- par(mfrow = c(2, 2))
plot(x = fr_st_mu, y = fr_st_response, main = "Response residuals")
plot(x = fr_st_mu, y = fr_st_pearson, main = "Pearson residuals")
plot(x = fr_st_mu, y = fr_st_scaled, main = "Pearson residuals scaled")
plot(x = fr_st_mu, y = fr_st_deviance, main = "Deviance residuals")
par(op)
#fr_cd
fr_cd = glm.nb(formula = Fish_Richness ~ Combined_Richness, data = variables)
fr_cd_pearson <- residuals(object = fr_cd, type = "pearson")
fr_cd_deviance <- residuals(object = fr_cd, type = "deviance")
fr_cd_mu <- predict(fr_cd, type = "response")
fr_cd_response <- variables$Fish_Richness - fr_cd_mu
fr_cd_scaled <- fr_cd_response / sqrt(7.630148 * fr_cd_mu)
# The authors explain that they have to manually scale the residuals because the residual function doesn't account
# for overdispersion, however, I'm not sure why they used 7.63... in this calculation.
op <- par(mfrow = c(2, 2))
plot(x = fr_cd_mu, y = fr_cd_response, main = "Response residuals")
plot(x = fr_cd_mu, y = fr_cd_pearson, main = "Pearson residuals")
plot(x = fr_cd_mu, y = fr_cd_scaled, main = "Pearson residuals scaled")
plot(x = fr_cd_mu, y = fr_cd_deviance, main = "Deviance residuals")
par(op)
#cd_cc
cd_cc = glm.nb(formula = Combined_Richness ~ Percent_Coral_Cover, data = variables)
cd_cc_pearson <- residuals(object = cd_cc, type = "pearson")
cd_cc_deviance <- residuals(object = cd_cc, type = "deviance")
cd_cc_mu <- predict(cd_cc, type = "response")
cd_cc_response <- variables$Combined_Richness - cd_cc_mu
cd_cc_scaled <- cd_cc_response / sqrt(7.630148 * cd_cc_mu)
# The authors explain that they have to manually scale the residuals because the residual function doesn't account
# for overdispersion, however, I'm not sure why they used 7.63... in this calculation.
op <- par(mfrow = c(2, 2))
plot(x = cd_cc_mu, y = cd_cc_response, main = "Response residuals")
plot(x = cd_cc_mu, y = cd_cc_pearson, main = "Pearson residuals")
plot(x = cd_cc_mu, y = cd_cc_scaled, main = "Pearson residuals scaled")
plot(x = cd_cc_mu, y = cd_cc_deviance, main = "Deviance residuals")
par(op)
#cd_sc
cd_sc = glm.nb(formula = Combined_Richness ~ Percent_Sponge_Cover, data = variables)
cd_sc_pearson <- residuals(object = cd_sc, type = "pearson")
cd_sc_deviance <- residuals(object = cd_sc, type = "deviance")
cd_sc_mu <- predict(cd_sc, type = "response")
cd_sc_response <- variables$Combined_Richness - cd_sc_mu
cd_sc_scaled <- cd_sc_response / sqrt(7.630148 * cd_sc_mu)
# The authors explain that they have to manually scale the residuals because the residual function doesn't account
# for overdispersion, however, I'm not sure why they used 7.63... in this calculation.
op <- par(mfrow = c(2, 2))
plot(x = cd_sc_mu, y = cd_sc_response, main = "Response residuals")
plot(x = cd_sc_mu, y = cd_sc_pearson, main = "Pearson residuals")
plot(x = cd_sc_mu, y = cd_sc_scaled, main = "Pearson residuals scaled")
plot(x = cd_sc_mu, y = cd_sc_deviance, main = "Deviance residuals")
par(op)
#cd_ru
cd_ru = glm.nb(formula = Combined_Richness ~ Rugosity, data = variables)
cd_ru_pearson <- residuals(object = cd_ru, type = "pearson")
cd_ru_deviance <- residuals(object = cd_ru, type = "deviance")
cd_ru_mu <- predict(cd_ru, type = "response")
cd_ru_response <- variables$Combined_Richness - cd_ru_mu
cd_ru_scaled <- cd_ru_response / sqrt(7.630148 * cd_ru_mu)
# The authors explain that they have to manually scale the residuals because the residual function doesn't account
# for overdispersion, however, I'm not sure why they used 7.63... in this calculation.
op <- par(mfrow = c(2, 2))
plot(x = cd_ru_mu, y = cd_ru_response, main = "Response residuals")
plot(x = cd_ru_mu, y = cd_ru_pearson, main = "Pearson residuals")
plot(x = cd_ru_mu, y = cd_ru_scaled, main = "Pearson residuals scaled")
plot(x = cd_ru_mu, y = cd_ru_deviance, main = "Deviance residuals")
par(op)
#cd_yr
cd_yr = glm.nb(formula = Combined_Richness ~ Year, data = variables)
cd_yr_pearson <- residuals(object = cd_yr, type = "pearson")
cd_yr_deviance <- residuals(object = cd_yr, type = "deviance")
cd_yr_mu <- predict(cd_yr, type = "response")
cd_yr_response <- variables$Combined_Richness - cd_yr_mu
cd_yr_scaled <- cd_yr_response / sqrt(7.630148 * cd_yr_mu)
# The authors explain that they have to manually scale the residuals because the residual function doesn't account
# for overdispersion, however, I'm not sure why they used 7.63... in this calculation.
op <- par(mfrow = c(2, 2))
plot(x = cd_yr_mu, y = cd_yr_response, main = "Response residuals")
plot(x = cd_yr_mu, y = cd_yr_pearson, main = "Pearson residuals")
plot(x = cd_yr_mu, y = cd_yr_scaled, main = "Pearson residuals scaled")
plot(x = cd_yr_mu, y = cd_yr_deviance, main = "Deviance residuals")
par(op)
#cd_st
cd_st = glm.nb(formula = Combined_Richness ~ Site, data = variables)
cd_st_pearson <- residuals(object = cd_st, type = "pearson")
cd_st_deviance <- residuals(object = cd_st, type = "deviance")
cd_st_mu <- predict(cd_st, type = "response")
cd_st_response <- variables$Combined_Richness - cd_st_mu
cd_st_scaled <- cd_st_response / sqrt(7.630148 * cd_st_mu)
# The authors explain that they have to manually scale the residuals because the residual function doesn't account
# for overdispersion, however, I'm not sure why they used 7.63... in this calculation.
op <- par(mfrow = c(2, 2))
plot(x = cd_st_mu, y = cd_st_response, main = "Response residuals")
plot(x = cd_st_mu, y = cd_st_pearson, main = "Pearson residuals")
plot(x = cd_st_mu, y = cd_st_scaled, main = "Pearson residuals scaled")
plot(x = cd_st_mu, y = cd_st_deviance, main = "Deviance residuals")
par(op)
#yr_cc
yr_cc = glm.nb(formula = Year ~ Percent_Coral_Cover, data = variables)
yr_cc_pearson <- residuals(object = yr_cc, type = "pearson")
yr_cc_deviance <- residuals(object = yr_cc, type = "deviance")
yr_cc_mu <- predict(yr_cc, type = "response")
yr_cc_response <- variables$Year - yr_cc_mu
yr_cc_scaled <- yr_cc_response / sqrt(7.630148 * yr_cc_mu)
# The authors explain that they have to manually scale the residuals because the residual function doesn't account
# for overdispersion, however, I'm not sure why they used 7.63... in this calculation.
op <- par(mfrow = c(2, 2))
plot(x = yr_cc_mu, y = yr_cc_response, main = "Response residuals")
plot(x = yr_cc_mu, y = yr_cc_pearson, main = "Pearson residuals")
plot(x = yr_cc_mu, y = yr_cc_scaled, main = "Pearson residuals scaled")
plot(x = yr_cc_mu, y = yr_cc_deviance, main = "Deviance residuals")
par(op)
#yr_sc
yr_sc = glm.nb(formula = Year ~ Percent_Sponge_Cover, data = variables)
yr_sc_pearson <- residuals(object = yr_sc, type = "pearson")
yr_sc_deviance <- residuals(object = yr_sc, type = "deviance")
yr_sc_mu <- predict(yr_sc, type = "response")
yr_sc_response <- variables$Year - yr_sc_mu
yr_sc_scaled <- yr_sc_response / sqrt(7.630148 * yr_sc_mu)
# The authors explain that they have to manually scale the residuals because the residual function doesn't account
# for overdispersion, however, I'm not sure why they used 7.63... in this calculation.
op <- par(mfrow = c(2, 2))
plot(x = yr_sc_mu, y = yr_sc_response, main = "Response residuals")
plot(x = yr_sc_mu, y = yr_sc_pearson, main = "Pearson residuals")
plot(x = yr_sc_mu, y = yr_sc_scaled, main = "Pearson residuals scaled")
plot(x = yr_sc_mu, y = yr_sc_deviance, main = "Deviance residuals")
par(op)
#yr_ru
yr_ru = glm.nb(formula = Year ~ Rugosity, data = variables)
yr_ru_pearson <- residuals(object = yr_ru, type = "pearson")
yr_ru_deviance <- residuals(object = yr_ru, type = "deviance")
yr_ru_mu <- predict(yr_ru, type = "response")
yr_ru_response <- variables$Year - yr_ru_mu
yr_ru_scaled <- yr_ru_response / sqrt(7.630148 * yr_ru_mu)
# The authors explain that they have to manually scale the residuals because the residual function doesn't account
# for overdispersion, however, I'm not sure why they used 7.63... in this calculation.
op <- par(mfrow = c(2, 2))
plot(x = yr_ru_mu, y = yr_ru_response, main = "Response residuals")
plot(x = yr_ru_mu, y = yr_ru_pearson, main = "Pearson residuals")
plot(x = yr_ru_mu, y = yr_ru_scaled, main = "Pearson residuals scaled")
plot(x = yr_ru_mu, y = yr_ru_deviance, main = "Deviance residuals")
par(op)
#yr_st
yr_st = glm.nb(formula = Year ~ Site, data = variables)
yr_st_pearson <- residuals(object = yr_st, type = "pearson")
yr_st_deviance <- residuals(object = yr_st, type = "deviance")
yr_st_mu <- predict(yr_st, type = "response")
yr_st_response <- variables$Year - yr_st_mu
yr_st_scaled <- yr_st_response / sqrt(7.630148 * yr_st_mu)
# The authors explain that they have to manually scale the residuals because the residual function doesn't account
# for overdispersion, however, I'm not sure why they used 7.63... in this calculation.
op <- par(mfrow = c(2, 2))
plot(x = yr_st_mu, y = yr_st_response, main = "Response residuals")
plot(x = yr_st_mu, y = yr_st_pearson, main = "Pearson residuals")
plot(x = yr_st_mu, y = yr_st_scaled, main = "Pearson residuals scaled")
plot(x = yr_st_mu, y = yr_st_deviance, main = "Deviance residuals")
par(op)
#st_cc
st_cc = glm.nb(formula = Site ~ Percent_Coral_Cover, data = variables)
st_cc_pearson <- residuals(object = st_cc, type = "pearson")
st_cc_deviance <- residuals(object = st_cc, type = "deviance")
st_cc_mu <- predict(st_cc, type = "response")
st_cc_response <- variables$Site - st_cc_mu
st_cc_scaled <- st_cc_response / sqrt(7.630148 * st_cc_mu)
# The authors explain that they have to manually scale the residuals because the residual function doesn't account
# for overdispersion, however, I'm not sure why they used 7.63... in this calculation.
op <- par(mfrow = c(2, 2))
plot(x = st_cc_mu, y = st_cc_response, main = "Response residuals")
plot(x = st_cc_mu, y = st_cc_pearson, main = "Pearson residuals")
plot(x = st_cc_mu, y = st_cc_scaled, main = "Pearson residuals scaled")
plot(x = st_cc_mu, y = st_cc_deviance, main = "Deviance residuals")
par(op)
#st_sc
st_sc = glm.nb(formula = Site ~ Percent_Sponge_Cover, data = variables)
st_sc_pearson <- residuals(object = st_sc, type = "pearson")
st_sc_deviance <- residuals(object = st_sc, type = "deviance")
st_sc_mu <- predict(st_sc, type = "response")
st_sc_response <- variables$Site - st_sc_mu
st_sc_scaled <- st_sc_response / sqrt(7.630148 * st_sc_mu)
# The authors explain that they have to manually scale the residuals because the residual function doesn't account
# for overdispersion, however, I'm not sure why they used 7.63... in this calculation.
op <- par(mfrow = c(2, 2))
plot(x = st_sc_mu, y = st_sc_response, main = "Response residuals")
plot(x = st_sc_mu, y = st_sc_pearson, main = "Pearson residuals")
plot(x = st_sc_mu, y = st_sc_scaled, main = "Pearson residuals scaled")
plot(x = st_sc_mu, y = st_sc_deviance, main = "Deviance residuals")
par(op)
#st_ru
st_ru = glm.nb(formula = Site ~ Rugosity, data = variables)
st_ru_pearson <- residuals(object = st_ru, type = "pearson")
st_ru_deviance <- residuals(object = st_ru, type = "deviance")
st_ru_mu <- predict(st_ru, type = "response")
st_ru_response <- variables$Site - st_ru_mu
st_ru_scaled <- st_ru_response / sqrt(7.630148 * st_ru_mu)
# The authors explain that they have to manually scale the residuals because the residual function doesn't account
# for overdispersion, however, I'm not sure why they used 7.63... in this calculation.
op <- par(mfrow = c(2, 2))
plot(x = st_ru_mu, y = st_ru_response, main = "Response residuals")
plot(x = st_ru_mu, y = st_ru_pearson, main = "Pearson residuals")
plot(x = st_ru_mu, y = st_ru_scaled, main = "Pearson residuals scaled")
plot(x = st_ru_mu, y = st_ru_deviance, main = "Deviance residuals")
par(op)
#cc_sc
cc_sc = glm.nb(formula = Percent_Coral_Cover ~ Percent_Sponge_Cover, data = variables)
cc_sc_pearson <- residuals(object = cc_sc, type = "pearson")
cc_sc_deviance <- residuals(object = cc_sc, type = "deviance")
cc_sc_mu <- predict(cc_sc, type = "response")
cc_sc_response <- variables$Percent_Coral_Cover - cc_sc_mu
cc_sc_scaled <- cc_sc_response / sqrt(7.630148 * cc_sc_mu)
# The authors explain that they have to manually scale the residuals because the residual function doesn't account
# for overdispersion, however, I'm not sure why they used 7.63... in this calculation.
op <- par(mfrow = c(2, 2))
plot(x = cc_sc_mu, y = cc_sc_response, main = "Response residuals")
plot(x = cc_sc_mu, y = cc_sc_pearson, main = "Pearson residuals")
plot(x = cc_sc_mu, y = cc_sc_scaled, main = "Pearson residuals scaled")
plot(x = cc_sc_mu, y = cc_sc_deviance, main = "Deviance residuals")
par(op)
#sc_ru
sc_ru = glm.nb(formula = Percent_Sponge_Cover ~ Rugosity, data = variables)
sc_ru_pearson <- residuals(object = sc_ru, type = "pearson")
sc_ru_deviance <- residuals(object = sc_ru, type = "deviance")
sc_ru_mu <- predict(sc_ru, type = "response")
sc_ru_response <- variables$Percent_Sponge_Cover - sc_ru_mu
sc_ru_scaled <- sc_ru_response / sqrt(7.630148 * sc_ru_mu)
# The authors explain that they have to manually scale the residuals because the residual function doesn't account
# for overdispersion, however, I'm not sure why they used 7.63... in this calculation.
op <- par(mfrow = c(2, 2))
plot(x = sc_ru_mu, y = sc_ru_response, main = "Response residuals")
plot(x = sc_ru_mu, y = sc_ru_pearson, main = "Pearson residuals")
plot(x = sc_ru_mu, y = sc_ru_scaled, main = "Pearson residuals scaled")
plot(x = sc_ru_mu, y = sc_ru_deviance, main = "Deviance residuals")
par(op)
ggplot(data = variables, aes(x = True_Year, y = Percent_Coral_Cover)) +
geom_point(size = 3) +
scale_x_continuous(name = "Time (Years)") +
scale_y_continuous(name = "Coral Cover (%)") +
geom_smooth(size = 1.2, method = "glm.nb", formula = y ~ x, color = "black") +
theme(text = element_text(size = 27),
panel.grid.major = element_line(colour = "light gray", size = (0.5)),
panel.grid.minor = element_line(colour = "light gray", size = (0.5)),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
library(sjPlot)
# First used for aic function, aictab
library(AICcmodavg)
# First used to make figures using function ggplot
library(ggplot2)
# First used for negative binomial modeling using function glm.nb
library(MASS)
# First used to make 3D model using function scatterplot3d
# The code that uses this package is commented out.
#library(scatterplot3d)
# First used to fit >1 ggplot on same window using function grid.arrange
library(gridExtra)
ggplot(data = variables, aes(x = True_Year, y = Percent_Coral_Cover)) +
geom_point(size = 3) +
scale_x_continuous(name = "Time (Years)") +
scale_y_continuous(name = "Coral Cover (%)") +
geom_smooth(size = 1.2, method = "glm.nb", formula = y ~ x, color = "black") +
theme(text = element_text(size = 27),
panel.grid.major = element_line(colour = "light gray", size = (0.5)),
panel.grid.minor = element_line(colour = "light gray", size = (0.5)),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ggplot(data = variables, aes(x = True_Year, y = Percent_Coral_Cover)) +
geom_point(size = 3) +
scale_x_continuous(name = "Time (Years)") +
scale_y_continuous(name = "Coral Cover (%)") +
geom_smooth(size = 1.2, method = "glm.nb", formula = y ~ x, color = "black") +
theme(text = element_text(size = 27),
panel.grid.major = element_line(colour = "light gray", size = (0.5)),
panel.grid.minor = element_line(colour = "light gray", size = (0.5)),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ggplot(data = variables, aes(x = True_Year, y = Percent_Sponge_Cover)) +
geom_point(size = 3) +
scale_x_continuous(name = "Time (Years)") +
scale_y_continuous(name = "Sponge Cover (%)") +
geom_smooth(size = 1.2, method = "glm.nb", formula = y ~ x, color = "black") +
theme(text = element_text(size = 27),
panel.grid.major = element_line(colour = "light gray", size = (0.5)),
panel.grid.minor = element_line(colour = "light gray", size = (0.5)),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ggplot(data = variables, aes(x = True_Year, y = Rugosity)) +
geom_point(size = 3) +
scale_x_continuous(name = "Time (Years)") +
scale_y_continuous(name = "Rugosity") +
geom_smooth(size = 1.2, method = "glm.nb", formula = y ~ x, color = "black") +
theme(text = element_text(size = 27),
panel.grid.major = element_line(colour = "light gray", size = (0.5)),
panel.grid.minor = element_line(colour = "light gray", size = (0.5)),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ggplot(data = variables, aes(x = True_Year, y = Coral_Richness)) +
geom_point(size = 3) +
scale_x_continuous(name = "Time (Years)") +
scale_y_continuous(name = "Coral Richness") +
geom_smooth(size = 1.2, method = "glm.nb", formula = y ~ x, color = "black") +
theme(text = element_text(size = 27),
panel.grid.major = element_line(colour = "light gray", size = (0.5)),
panel.grid.minor = element_line(colour = "light gray", size = (0.5)),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ggplot(data = variables, aes(x = True_Year, y = Sponge_Richness)) +
geom_point(size = 3) +
scale_x_continuous(name = "Time (Years)") +
scale_y_continuous(name = "Sponge Richness") +
geom_smooth(size = 1.2, method = "glm.nb", formula = y ~ x, color = "black") +
theme(text = element_text(size = 27),
panel.grid.major = element_line(colour = "light gray", size = (0.5)),
panel.grid.minor = element_line(colour = "light gray", size = (0.5)),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ggplot(data = variables, aes(x = True_Year, y = Fish_Richness)) +
geom_point(size = 3) +
scale_x_continuous(name = "Time (Years)") +
scale_y_continuous(name = "Fish Richness") +
geom_smooth(size = 1.2, method = "glm.nb", formula = y ~ x, color = "black") +
theme(text = element_text(size = 27),
panel.grid.major = element_line(colour = "light gray", size = (0.5)),
panel.grid.minor = element_line(colour = "light gray", size = (0.5)),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ggplot(data = variables, aes(x = True_Year, y = Combined_Richness)) +
geom_point(size = 3) +
scale_x_continuous(name = "Time (Years)") +
scale_y_continuous(name = "Combined Richness") +
geom_smooth(size = 1.2, method = "glm.nb", formula = y ~ x, color = "black") +
theme(text = element_text(size = 27),
panel.grid.major = element_line(colour = "light gray", size = (0.5)),
panel.grid.minor = element_line(colour = "light gray", size = (0.5)),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
variables$True_Year_Factor <- as.factor(x = variables$True_Year)
library(sjPlot)
# First used for aic function, aictab
library(AICcmodavg)
# First used to make figures using function ggplot
library(ggplot2)
# First used for negative binomial modeling using function glm.nb
library(MASS)
# First used to make 3D model using function scatterplot3d
# The code that uses this package is commented out.
#library(scatterplot3d)
# First used to fit >1 ggplot on same window using function grid.arrange
library(gridExtra)
#cr_cc_yr
cr_cc_yr = glm.nb(formula = Coral_Richness ~ Percent_Coral_Cover + Year, data = variables)
cr_cc_yr_pearson <- residuals(object = cr_cc_yr, type = "pearson")
cr_cc_yr_deviance <- residuals(object = cr_cc_yr, type = "deviance")
cr_cc_yr_mu <- predict(cr_cc_yr, type = "response")
cr_cc_yr_response <- variables$Coral_Richness - cr_cc_yr_mu
cr_cc_yr_scaled <- cr_cc_yr_response / sqrt(7.630148 * cr_cc_yr_mu)
# The authors explain that they have to manually scale the residuals because the residual function doesn't account
# for overdispersion, however, I'm not sure why they used 7.63... in this calculation.
op <- par(mfrow = c(2, 2))
plot(x = cr_cc_yr_mu, y = cr_cc_yr_response, main = "Response residuals")
plot(x = cr_cc_yr_mu, y = cr_cc_yr_pearson, main = "Pearson residuals")
plot(x = cr_cc_yr_mu, y = cr_cc_yr_scaled, main = "Pearson residuals scaled")
plot(x = cr_cc_yr_mu, y = cr_cc_yr_deviance, main = "Deviance residuals")
par(op)
#cr_cc
cr_cc = glm.nb(formula = Coral_Richness ~ Percent_Coral_Cover, data = variables)
cr_cc_pearson <- residuals(object = cr_cc, type = "pearson")
cr_cc_deviance <- residuals(object = cr_cc, type = "deviance")
cr_cc_mu <- predict(cr_cc, type = "response")
cr_cc_response <- variables$Coral_Richness - cr_cc_mu
cr_cc_scaled <- cr_cc_response / sqrt(7.630148 * cr_cc_mu)
# The authors explain that they have to manually scale the residuals because the residual function doesn't account
# for overdispersion, however, I'm not sure why they used 7.63... in this calculation.
op <- par(mfrow = c(2, 2))
plot(x = cr_cc_mu, y = cr_cc_response, main = "Response residuals")
plot(x = cr_cc_mu, y = cr_cc_pearson, main = "Pearson residuals")
plot(x = cr_cc_mu, y = cr_cc_scaled, main = "Pearson residuals scaled")
plot(x = cr_cc_mu, y = cr_cc_deviance, main = "Deviance residuals")
par(op)
cr_cc_yr = glm.nb(formula = Coral_Richness ~ Percent_Coral_Cover + Year + Percent_Coral_Cover*Year, data = variables)
cr_cc_yr_pearson <- residuals(object = cr_cc_yr, type = "pearson")
cr_cc_yr_deviance <- residuals(object = cr_cc_yr, type = "deviance")
cr_cc_yr_mu <- predict(cr_cc_yr, type = "response")
cr_cc_yr_response <- variables$Coral_Richness - cr_cc_yr_mu
cr_cc_yr_scaled <- cr_cc_yr_response / sqrt(7.630148 * cr_cc_yr_mu)
# The authors explain that they have to manually scale the residuals because the residual function doesn't account
# for overdispersion, however, I'm not sure why they used 7.63... in this calculation.
op <- par(mfrow = c(2, 2))
plot(x = cr_cc_yr_mu, y = cr_cc_yr_response, main = "Response residuals")
plot(x = cr_cc_yr_mu, y = cr_cc_yr_pearson, main = "Pearson residuals")
plot(x = cr_cc_yr_mu, y = cr_cc_yr_scaled, main = "Pearson residuals scaled")
plot(x = cr_cc_yr_mu, y = cr_cc_yr_deviance, main = "Deviance residuals")
par(op)
cr_cc_yr = glm.nb(formula = Combined_Richness ~ Rugosity + Year + Site, data = variables)
cr_cc_yr_pearson <- residuals(object = cr_cc_yr, type = "pearson")
cr_cc_yr_deviance <- residuals(object = cr_cc_yr, type = "deviance")
cr_cc_yr_mu <- predict(cr_cc_yr, type = "response")
cr_cc_yr_response <- variables$Combined_Richness - cr_cc_yr_mu
cr_cc_yr_scaled <- cr_cc_yr_response / sqrt(7.630148 * cr_cc_yr_mu)
# The authors explain that they have to manually scale the residuals because the residual function doesn't account
# for overdispersion, however, I'm not sure why they used 7.63... in this calculation.
op <- par(mfrow = c(2, 2))
plot(x = cr_cc_yr_mu, y = cr_cc_yr_response, main = "Response residuals")
plot(x = cr_cc_yr_mu, y = cr_cc_yr_pearson, main = "Pearson residuals")
plot(x = cr_cc_yr_mu, y = cr_cc_yr_scaled, main = "Pearson residuals scaled")
plot(x = cr_cc_yr_mu, y = cr_cc_yr_deviance, main = "Deviance residuals")
par(op)
cr_cc_yr = glm.nb(formula = Fish_Richness ~ Rugosity + Site, data = variables)
cr_cc_yr_pearson <- residuals(object = cr_cc_yr, type = "pearson")
cr_cc_yr_deviance <- residuals(object = cr_cc_yr, type = "deviance")
cr_cc_yr_mu <- predict(cr_cc_yr, type = "response")
cr_cc_yr_response <- variables$Fish_Richness - cr_cc_yr_mu
cr_cc_yr_scaled <- cr_cc_yr_response / sqrt(7.630148 * cr_cc_yr_mu)
# The authors explain that they have to manually scale the residuals because the residual function doesn't account
# for overdispersion, however, I'm not sure why they used 7.63... in this calculation.
op <- par(mfrow = c(2, 2))
plot(x = cr_cc_yr_mu, y = cr_cc_yr_response, main = "Response residuals")
plot(x = cr_cc_yr_mu, y = cr_cc_yr_pearson, main = "Pearson residuals")
plot(x = cr_cc_yr_mu, y = cr_cc_yr_scaled, main = "Pearson residuals scaled")
plot(x = cr_cc_yr_mu, y = cr_cc_yr_deviance, main = "Deviance residuals")
par(op)
#cr_cc_yr
cr_cc_yr = glm.nb(formula = Sponge_Richness ~ Percent_Coral_Cover + Year + Site, data = variables)
cr_cc_yr_pearson <- residuals(object = cr_cc_yr, type = "pearson")
cr_cc_yr_deviance <- residuals(object = cr_cc_yr, type = "deviance")
cr_cc_yr_mu <- predict(cr_cc_yr, type = "response")
cr_cc_yr_response <- variables$Sponge_Richness - cr_cc_yr_mu
cr_cc_yr_scaled <- cr_cc_yr_response / sqrt(7.630148 * cr_cc_yr_mu)
# The authors explain that they have to manually scale the residuals because the residual function doesn't account
# for overdispersion, however, I'm not sure why they used 7.63... in this calculation.
op <- par(mfrow = c(2, 2))
plot(x = cr_cc_yr_mu, y = cr_cc_yr_response, main = "Response residuals")
plot(x = cr_cc_yr_mu, y = cr_cc_yr_pearson, main = "Pearson residuals")
plot(x = cr_cc_yr_mu, y = cr_cc_yr_scaled, main = "Pearson residuals scaled")
plot(x = cr_cc_yr_mu, y = cr_cc_yr_deviance, main = "Deviance residuals")
par(op)
library(sjPlot)
# First used for aic function, aictab
library(AICcmodavg)
# First used to make figures using function ggplot
library(ggplot2)
# First used for negative binomial modeling using function glm.nb
library(MASS)
# First used to make 3D model using function scatterplot3d
# The code that uses this package is commented out.
#library(scatterplot3d)
# First used to fit >1 ggplot on same window using function grid.arrange
library(gridExtra)
summary(lm(data = variables, formula = Percent_Coral_Cover ~ Percent_Sponge_Cover))$r.squared
ggplot(data = variables, aes(x = Percent_Sponge_Cover, y = Percent_Coral_Cover)) +
geom_point(data = variables, size = 3, aes(x = Percent_Sponge_Cover, y = Percent_Coral_Cover)) +
geom_smooth(method = "glm", se = TRUE) +
labs(x = "Sponge Cover (%)", y = "Coral Cover (%)") +
annotate(geom = "text", x = 30, y = 35, label = "italic(R) ^ 2 == 0.11", parse = TRUE) +
theme(text = element_text(size = 18),
panel.grid.major = element_line(colour = "light gray", size = (0.5)),
panel.grid.minor = element_line(colour = "light gray", size = (0.5)),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ggplot(data = variables, aes(x = Percent_Sponge_Cover, y = Percent_Coral_Cover)) +
geom_point(data = variables, size = 3, aes(x = Percent_Sponge_Cover, y = Percent_Coral_Cover)) +
geom_smooth(method = "glm", se = TRUE) +
labs(x = "Sponge Cover (%)", y = "Coral Cover (%)") +
annotate(geom = "text", x = 25, y = 35, label = "italic(R) ^ 2 == 0.11", parse = TRUE) +
theme(text = element_text(size = 18),
panel.grid.major = element_line(colour = "light gray", size = (0.5)),
panel.grid.minor = element_line(colour = "light gray", size = (0.5)),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
summary(lm(data = variables, formula = Percent_Coral_Cover ~ Rugosity))$r.squared
summary(lm(data = variables, formula = Rugosity ~ Percent_Sponge_Cover))$r.squared
ggplot(data = variables, aes(x = Percent_Sponge_Cover, y = Percent_Coral_Cover)) +
geom_point(data = variables, size = 3, aes(x = Percent_Sponge_Cover, y = Percent_Coral_Cover)) +
geom_smooth(method = "glm", se = TRUE) +
labs(x = "Sponge Cover (%)", y = "Coral Cover (%)") +
annotate(geom = "text", x = 25, y = 35, label = "italic(R) ^ 2 == 0.11", parse = TRUE) +
theme(text = element_text(size = 18),
panel.grid.major = element_line(colour = "light gray", size = (0.5)),
panel.grid.minor = element_line(colour = "light gray", size = (0.5)),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ggplot(data = variables, aes(x = Rugosity, y = Percent_Coral_Cover)) +
geom_point(data = variables, size = 3, aes(x = Rugosity, y = Percent_Coral_Cover)) +
geom_smooth(method = "glm", se = TRUE) +
labs(x = "Rugosity", y = "Coral Cover (%)") +
annotate(geom = "text", x = 25, y = 35, label = "italic(R) ^ 2 == 0.39", parse = TRUE) +
theme(text = element_text(size = 18),
panel.grid.major = element_line(colour = "light gray", size = (0.5)),
panel.grid.minor = element_line(colour = "light gray", size = (0.5)),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ggplot(data = variables, aes(x = Percent_Sponge_Cover, y = Rugosity)) +
geom_point(data = variables, size = 3, aes(x = Percent_Sponge_Cover, y = Rugosity)) +
geom_smooth(method = "glm", se = TRUE) +
labs(x = "Sponge Cover (%)", y = "Rugosity") +
annotate(geom = "text", x = 25, y = 35, label = "italic(R) ^ 2 == 0.12", parse = TRUE) +
theme(text = element_text(size = 18),
panel.grid.major = element_line(colour = "light gray", size = (0.5)),
panel.grid.minor = element_line(colour = "light gray", size = (0.5)),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
